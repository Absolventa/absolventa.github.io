<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Devnull</title>
		<description>The blog of the ABSOLVENTA Dev Team</description>
		<link>http://devnull.absolventa.de</link>
		<atom:link href="http://devnull.absolventa.de/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Dream of BEMifornication – or how we refactored our scss with linting</title>
				<description>&lt;p&gt;Writing a lot of code over the years also means to deal with refactoring at some point. Your skills improve over time and technologies evolve. Coming back to an old project often makes it hard to understand what the heck Younger You was thinking when writing and structuring this code.&lt;/p&gt;

&lt;p&gt;For example when I started learning SASS, I felt in love with nesting everything. Back then I tought nesting elements would be the best way to avoid css conflicts … I figured out that might just be true up to a certain level of nesting. When &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt; came around, we started sticking to its convention, leaving previously written css code mostly untouched. Things started to get messy in our frontend codebase.&lt;/p&gt;

&lt;p&gt;Lately my fellow co-worker Alex began to refactor our oldest project and we started talking about &lt;a href=&quot;https://github.com/brigade/scss-lint/&quot;&gt;scss-lint&lt;/a&gt;. I was already using &lt;a href=&quot;http://jslint.com/&quot;&gt;jslint&lt;/a&gt; in my editor but never really thought about linting my scss as well. We sat together and before long, we agreed that it is about time to start using it.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-scsslint&quot;&gt;So what is scsslint?&lt;/h2&gt;

&lt;p&gt;Scss-lint is a tool to analyse your scss code for potential errors and to make sure the code conventions are respected.&lt;/p&gt;

&lt;p&gt;In order to use &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;scss_lint&lt;/a&gt; in your rails application you need to include it into your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scss_lint&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Afterwards you can configure the linting rules by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss_lint.yml&lt;/code&gt; to your applications root directory. You can find a list of all supported linting options &lt;a href=&quot;https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;scss_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app/assets/stylesheets/**/*.css.scss&#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app/assets/stylesheets/vendor/**&#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;linters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;BorderZero&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;Indentation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warning&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;SelectorFormat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;convention&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hyphenated_BEM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-linter-walks-into-a-project&quot;&gt;A linter walks into a project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-mB2Cx3d05u4/UOoAHp1BU0I/AAAAAAAAFBc/SWdJcAmH7Vk/w1200-h630-p-nu/troy-barnes.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ scss-lint&lt;/code&gt; in your terminal, will give you a good overview which files to tackle. If you want to see different information, for example the files which have no warnings, it is worth to checkout the &lt;a href=&quot;https://github.com/brigade/scss-lint#formatters&quot;&gt;formaters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use linting within your editor you need to install a &lt;a href=&quot;https://github.com/brigade/scss-lint#editor-integration&quot;&gt;plugin&lt;/a&gt;. I would suggest mapping linting to a key instead of automaticaly linting when opening or saving a file. If you still want to enable “autolinting”, keep in mind that it will slow down your text editor’s speed.&lt;/p&gt;

&lt;h2 id=&quot;jumping-into-the-mud&quot;&gt;Jumping into the mud&lt;/h2&gt;

&lt;p&gt;I highly recommend &lt;strong&gt;automating most of the linting&lt;/strong&gt; tasks: it saves a lot of time that we can spend focussing on bemifaction.&lt;/p&gt;

&lt;p&gt;Introducing &lt;a href=&quot;http://csscomb.com/&quot;&gt;CSScomb&lt;/a&gt;. This is a fantastic tool for automatic linting. It formats your code very efficiently and it’s easy to customize. You can create your configuration by using the config generator on the project’s website
or download some configs &lt;a href=&quot;https://github.com/csscomb/csscomb.js/tree/dev/config&quot;&gt;here&lt;/a&gt;.
We used &lt;code class=&quot;highlighter-rouge&quot;&gt;csscomb.json&lt;/code&gt; and tweaked the sort-order to match &lt;a href=&quot;https://github.com/brandon-rhodes/Concentric-CSS&quot;&gt;Concentric-CSS order&lt;/a&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e73bed248df2d3af1e489c74d8bbe9be.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I installed &lt;a href=&quot;https://github.com/csscomb/vim-csscomb&quot;&gt;vim-csscomb&lt;/a&gt; to use csscomb within my editor but there are plugins for all major editors arround.&lt;/p&gt;

&lt;p&gt;Let’s start digging!&lt;/p&gt;

&lt;p&gt;Alex came up with a simple structure for our scss files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;BLOCK&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;MODIFIER&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example--red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ELEMENT&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example__title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dividing our modules in BEM-blocks ensures the usage of only one block element per file.
Bemify your classes, refactor your views, run CSScomb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia.riffsy.com%2Fimages%2F3ccc0e15cbf9bee22c30701649065643%2Ftenor.gif&amp;amp;f=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voilà.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It can be a long road and in the beginning it seems like a hole with no bottom. But seeing the warning and error messages disappear can be very rewarding. Is it fun? No. Do you end up with cleaner code, better maintainablity and less conflicts in your stylesheets? Yes.&lt;/p&gt;
</description>
				<pubDate>Fri, 07 Oct 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/10/07/dream-of-bemifornication/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/10/07/dream-of-bemifornication/</guid>
			</item>
		
			<item>
				<title>Call by what? An adventure story about evaluation strategies</title>
				<description>&lt;h3 id=&quot;evaluation-of-methods&quot;&gt;Evaluation of methods&lt;/h3&gt;

&lt;p&gt;When I learned C++ at university some time ago, the concept of references and pointers
fascinated and confused me simultaneously. But for some reason I liked tinkering with it.&lt;/p&gt;

&lt;p&gt;I was remembered to that time when I was recently confronted with so-called &lt;em&gt;evaluation strategies&lt;/em&gt;
in a completely different context. Talking about programming languages, an &lt;em&gt;evaluation strategy&lt;/em&gt; is a 
description on what happens to the arguments that have been passed to a function when the function 
is executed.&lt;/p&gt;

&lt;p&gt;When it comes to evaluation strategies, C++ has a pretty clear and simple answer to a theorist’s questions: 
The programmer can explictly control if a function/method should use the 
strategy &lt;em&gt;call-by-value&lt;/em&gt; or &lt;em&gt;call-by-reference&lt;/em&gt; for method evaluation. 
This is possible because in C++ there is an explicit seperation between
values (content of memory blocks) and references/pointers to them.&lt;/p&gt;

&lt;h4 id=&quot;what-does-call-by-value-and-call-by-reference-mean&quot;&gt;What does call-by-value and call-by-reference mean?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Call by value&lt;/em&gt; and &lt;em&gt;call-by-reference&lt;/em&gt; are probably the most popular evaluation strategies
used in major programming languages today.&lt;/p&gt;

&lt;p&gt;Losely spoken, &lt;em&gt;call-by-value&lt;/em&gt; means that the argument that has been passed into
a function gets copied before it is used during execution. The original expression 
is not modified or touched and the function body gets its own copy to play with.&lt;/p&gt;

&lt;p&gt;Let’s assume we own a picture of monkey. And now we meet a pirate, that loves drawing. 
The pirate wants to draw a banana onto our picture. If the pirate likes &lt;em&gt;call-by-value&lt;/em&gt;, 
he’ll copy the picture first, draw a banana onto his copy and hands back the copy with the banana.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;em&gt;call-by-reference&lt;/em&gt; means that the expression that is passed to
the function is not copied. It is directly used in the function body. That means, 
the pirate would directly draw his banana onto the monkey picture that we own. 
Our original picture has been modified.&lt;/p&gt;

&lt;h4 id=&quot;eh-can-you-convert-these-thoughts-to-some-concrete-code-please&quot;&gt;Eh, can you convert these thoughts to some concrete code, please?&lt;/h4&gt;

&lt;p&gt;let’s assume we have written a C++ snippet as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawBananaOntoACopyOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey with a banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drawBananaOntoACopyOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;em&gt;drawBananaOntoACopyOf&lt;/em&gt; will take an instance
of an data structure called &lt;code class=&quot;highlighter-rouge&quot;&gt;Picture&lt;/code&gt;. When we would have written it this
way, the value &lt;em&gt;p&lt;/em&gt; will be &lt;em&gt;copied&lt;/em&gt; to the function’s
body data available during execution, when &lt;em&gt;drawBananaOntoACopy&lt;/em&gt; is invoked. Running
the program will cause the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;A monkey
A monkey&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we would conversly write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawBananaDirectlyOnto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey with a banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drawBananaDirectlyOnto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then, when &lt;em&gt;drawBananaDirectlyOnto&lt;/em&gt; is invoked, &lt;em&gt;p&lt;/em&gt; will be a &lt;em&gt;reference&lt;/em&gt; to an existing picture structure
somewhere in the memory. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;-sign indicates this to the compiler, it’s a syntactic method
of C++ to control the evaluation strategy (&lt;em&gt;call-by-reference&lt;/em&gt; in the latter case).&lt;/p&gt;

&lt;p&gt;The output would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;A monkey
A monkey with a banana&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;hm-ok-seems-pretty-clear-wheres-the-joke&quot;&gt;Hm. Ok. Seems pretty clear. Where’s the joke?&lt;/h3&gt;

&lt;p&gt;The situation is a bit more interesting for other programming languages, like
Ruby. Eager readers can short circuit this reading &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;and head over to a very enlightening discussion
on stackoverflow&lt;/a&gt;, 
but I’d like to recap the discussion and the final result in my own words.&lt;/p&gt;

&lt;p&gt;First, unlike C++, Ruby has no built-in seperation between values and references. Everything
we save to variables in Ruby is a &lt;em&gt;reference&lt;/em&gt; to an object. We only have access to the things 
in the memory via these references.&lt;/p&gt;

&lt;p&gt;But what happens if we pass these variables (holding references) into Ruby methods? What kind
of evaluation strategy does Ruby use? Let’s examine.&lt;/p&gt;

&lt;h4 id=&quot;meanwhile-in-the-laboratory&quot;&gt;Meanwhile in the laboratory&lt;/h4&gt;

&lt;p&gt;Consider the following Ruby code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dabble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;When dabbling, I dabble with the object_id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I am an important line. Why?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Richard Feynman&#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The input human is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It has the object_id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Let&#39;s dabble!&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dabble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;After dabbling the scientist is named &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running this snippet results in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;The input human is Richard Feynman
It has the object_id 70159717619940
Let&lt;span class=&quot;s1&quot;&gt;&#39;s dabble!
When dabbling, I dabble with the object_id 70159717619940
After dabbling the scientist is named Richard Feynman&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At the first hand, this may intuitively feel like Ruby is using &lt;em&gt;call-by-reference&lt;/em&gt;, since
the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; inside the function body is the same as before, so it looks like
there has no “copying” being performed. What we put in, is obviously &lt;em&gt;a reference&lt;/em&gt; similar
to the references in the C++-examples.&lt;/p&gt;

&lt;h4 id=&quot;analysis&quot;&gt;Analysis&lt;/h4&gt;

&lt;p&gt;But this only true at the surface. Let’s remember the fact mentioned above: Ruby has no
&lt;em&gt;values&lt;/em&gt; in the sense of C++, Ruby &lt;em&gt;only&lt;/em&gt; has (object) references. 
The only way of modifying a reference is &lt;em&gt;assignment&lt;/em&gt;. Assignments either change existing references or 
create new ones. Keeping that in mind, concentrate on this line in the Ruby code example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s assume that Ruby would have used &lt;em&gt;call-by-reference&lt;/em&gt;. Then, according to our “definition” above, 
the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt;, which is a reference, that has been passed to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;,
has not been copied. It has directly been passed to the method body.&lt;/p&gt;

&lt;p&gt;If so, the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; within the method body would have modified 
the (original) reference that has been created before method invocation. The expression
&lt;code class=&quot;highlighter-rouge&quot;&gt;human.reverse&lt;/code&gt; would have created a new string (the reversed) with a new &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; and
the existing reference &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt; would now point to the new object, the reversed string, because
it has been assigned.&lt;/p&gt;

&lt;p&gt;But, as proven by the output, this is not the case. The original reference points to the same 
thing and has not been changed. If Ruby would use &lt;em&gt;call-by-reference&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt; would point to the
reversed string in a new memory block afterwards - but it doesn’t.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;stackoverflow discussion&lt;/a&gt;
I already mentioned are great explanation pictures - I’d like to pick up some thoughts of the answers here:&lt;/p&gt;

&lt;p&gt;Check the variable situation when the method body of &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt; starts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var_human_outside_the_method -------→  &lt;span class=&quot;s2&quot;&gt;&quot;Richard Feynman&quot;&lt;/span&gt;
                                               ↑ 
var_human_inside_the_method  -------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When running the first line of &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;, there are &lt;em&gt;two&lt;/em&gt; references 
to the string “Richard Feynman”. One original and the copy held by &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;.
I intentionally chose them both to have the same name, which may is confusing.&lt;/p&gt;

&lt;p&gt;Then, the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt; method changes 
the situation as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var_human_outside_the_method -------→  &lt;span class=&quot;s2&quot;&gt;&quot;Richard Feynman&quot;&lt;/span&gt; 
                                                 
var_human_inside_the_method  ------------------→ &lt;span class=&quot;s2&quot;&gt;&quot;namnyeF drahciR&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;a-bigger-picture&quot;&gt;A bigger picture&lt;/h4&gt;

&lt;p&gt;As we have seen, one could argue that Ruby uses &lt;em&gt;call-by-value&lt;/em&gt; when applying the “canoncial”
terminology used in computer science strictly. Up to now we only discussed
two specific evaluaton strategies. But I’d like to underline that the world of 
evaluation strategies is &lt;em&gt;not&lt;/em&gt; binary - it’s a bit more colored than only black and white. 
There are some other approaches beside  &lt;em&gt;call-by-value&lt;/em&gt; and &lt;em&gt;call-by-reference&lt;/em&gt; and even the 
latter trategies can be differentiated a bit more.&lt;/p&gt;

&lt;p&gt;The wikipedia article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;evaluation strategies&lt;/a&gt;
calls the variant of Ruby is using &lt;em&gt;call-by-sharing&lt;/em&gt;, which is an interesting point of view, since it is more
suitable for languages that do “wrap” all values, i.e. Ruby with its object references.&lt;/p&gt;

&lt;p&gt;The description found in that article reads as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The semantics of call by sharing differ from call by reference in that assignments 
to function arguments within the function aren’t visible to the caller, (unlike by reference semantics), so e.g. 
if a variable was passed, it is not possible to simulate an assignment on that variable in the caller’s scope&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… and that’s exactly what happened in our Ruby script. The assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; was not visible
to the “global” scope outside the method &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;further-related-reading&quot;&gt;Further (related) reading&lt;/h3&gt;

&lt;p&gt;I ran into this discussion with myself while reading some chapters of the book &lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/&quot;&gt;Types and Programming Languages&lt;/a&gt;
by Benjamin C. Pierce. It contains a discussion of &lt;em&gt;evaluation/reduction strategies&lt;/em&gt; of the so-called &lt;a href=&quot;https://www.youtube.com/watch?v=FITJMJjASUs&amp;amp;ab_channel=Confreaks&quot;&gt;&lt;em&gt;λ-calculus&lt;/em&gt;&lt;/a&gt;, which serves as a theoretical
model of computation and can be seen as a great-grandfather of all today’s functional programming languages.&lt;/p&gt;

&lt;p&gt;Playing with these concepts encouraged me recapitulating how non-theoretical languages, 
like C++ or Ruby, accomodate this and how the “practical” evaluation strategies performed by Ruby or C++ 
relate to the original definitions given in the context of formal systems like the λ-calculus.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper, more details of &lt;em&gt;call-by-value&lt;/em&gt; as evaluation/reduction strategy for the λ-calculus can be found 
&lt;a href=&quot;http://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf&quot;&gt;in a paper by Gordon Plotkin&lt;/a&gt; from 1975 as well as, more convenient for non-computer-science-researchers, 
in Chapter 5 of &lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/&quot;&gt;TAPL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned, I found the discussion related to &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;this question on stackoverflow&lt;/a&gt;
very educational, so if I left you confused about the topic, there’s a good chance that you’ll find illumination there.&lt;/p&gt;
</description>
				<pubDate>Fri, 15 Jul 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/07/15/call-by-what-an-adventure-story-about-evaluation-strategies/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/07/15/call-by-what-an-adventure-story-about-evaluation-strategies/</guid>
			</item>
		
			<item>
				<title>Loading Controller-specific Assets with Sprockets v3.0</title>
				<description>&lt;p&gt;Going from Rails v4.2.4 to v4.2.6 – a mere &lt;em&gt;patchlevel&lt;/em&gt; update, mind you –
became a Yak-shaving nightmare: Upgrading two other gems that broke with v4.2.6
brought in Sprockets v3.x. And that broke our little logic to include
&lt;strong&gt;controller-specific javascript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have separate JS files following a naming convention that should be included
in the layout when they are present. The path is constructed as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the pre-update version, we included the Javascript like this:&lt;/p&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_asset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find_asset&lt;/code&gt; was gone post-update and none of the discussed solutions in issue
&lt;a href=&quot;https://github.com/rails/sprockets-rails/issues/311&quot;&gt;rails/rails#311&lt;/a&gt; were
working for us. &lt;code class=&quot;highlighter-rouge&quot;&gt;assets_manifest[filename]&lt;/code&gt; was always empty and we didn’t
want to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;asset_path(filename)&lt;/code&gt; without really knowing if the asset exists.&lt;/p&gt;

&lt;p&gt;However, we noticed that &lt;em&gt;existing&lt;/em&gt; assets had the literal &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/assets/&quot;&lt;/code&gt; in
their path only when found. We used that to determine whether or not to out the
JS include statement:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\/assets\//&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kinda ugly, yes, but seemed to get the job done. Only it didn’t. Apparently
&lt;code class=&quot;highlighter-rouge&quot;&gt;asset_path&lt;/code&gt; has some additional behind-the-scenes magic that, to add insult to
injury, behaves differently in development than on staging/production of
course: It requires an explicit filename extension to locate the asset.&lt;/p&gt;

&lt;p&gt;Behold the final version:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\/assets\//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;YMMV, of course, but we hope it helps.&lt;/p&gt;
</description>
				<pubDate>Fri, 20 May 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/05/20/loading-controller-specific-assets-with-sprockets-3/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/05/20/loading-controller-specific-assets-with-sprockets-3/</guid>
			</item>
		
			<item>
				<title>Adhoc Exports on Heroku's Console</title>
				<description>&lt;p&gt;Ever had that &lt;em&gt;»can you give me a list of … real quick?«&lt;/em&gt; request coming in?
Most of the time, delivering that list only involves firing a simple Arel query
on the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails console&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#join&lt;/code&gt; the record’s relevant attributes with a
mere &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and hand it over as a CSV file.&lt;/p&gt;

&lt;p&gt;The annoying part is capturing the output: For a large resultset, it can very
well exceed your terminal’s output buffer size. Even if it does fits,
copy/pasting everything with your mouse is tedious at best.&lt;/p&gt;

&lt;p&gt;Writing to a CSV file on Heroku’s Rails console requires uploading it
somewhere, S3 in our case, meaning you’ll have to deal with authentication keys
and APIs that I don’t know by heart. Also not my idea of quickly running a
simple export.&lt;/p&gt;

&lt;p&gt;Creating a rake task that handles everything is certainly the proper way to go,
but it means doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;, waiting for the stuff to deploy and potentially
&lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt; the exporter again if it’s just throw-away code.&lt;/p&gt;

&lt;p&gt;I want to stick with a simple Ruby one-liner and this is how I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails
runner&lt;/code&gt; command, invoked through the Heroku console, together with output
redirection to create my CSV file freshly from production data:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku run rails runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;puts MyModel.where(foo: &#39;bar&#39;).pluck(:id, :email).map { |data| data.join(&#39;;&#39;) }&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -r production &amp;gt; my_adhoc_export.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to see what’s going on while your export does its thing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;tee(1)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku run rails runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;puts &#39;They are going to take me away haha!&#39;&quot;&lt;/span&gt;
  -r production |tee funny_farm.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, a bit of an advise: running code on your production system is not a Good Idea™.
If you have to run anything more complex than a simple query-command, wrap it into
a rake task (or some such). The above example is meant for one-off tasks that output
stuff to my local terminal. You have been warned :)&lt;/p&gt;
</description>
				<pubDate>Tue, 29 Mar 2016 11:54:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/03/29/adhoc-data-dumps-and-exports-on-heroku/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/03/29/adhoc-data-dumps-and-exports-on-heroku/</guid>
			</item>
		
			<item>
				<title>Including a Module. With Parameters!</title>
				<description>&lt;p&gt;The Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; statement only allows for one type of argument: the module
constant(s) to include. Oftentimes I wish it would be possible to pass
arguments that the included module receives as optional parameters to its
&lt;code class=&quot;highlighter-rouge&quot;&gt;included&lt;/code&gt; callback like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Note: This would be nice … but this code doesn&#39;t compile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here_be_more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Have access to the additional args passed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# in the include statement below&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:param2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Module.html#method-i-included&quot;&gt;Module#included&lt;/a&gt;
is the method that gets called when the module is included somewhere. Unlike in
my would-be-nice example, it only receives one argument: the constant of the
including class.&lt;/p&gt;

&lt;p&gt;Additional arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; are expected to be modules, allowing you to
include more than one module on one line.&lt;/p&gt;

&lt;p&gt;A way to parameterize the behaviour of included modules is to add a &lt;strong&gt;singleton&lt;/strong&gt;
method in the included class and then have that class method accept parameters to
do whatever (e.g. set class-wide variables or dynamically define methods).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_singleton_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:define_greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# A dynamically defined method that dynamically defines another&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# method. What a crazy world!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass1&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_greeter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:morning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good morning, sir/madam&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass2&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_greeter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:afternoon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good afternoon! Would you like some tea?&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyClass1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;morning&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good morning, sir/madam!&#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyClass2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afternoon&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good afternoon! Would you like some tea?&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is obviously a contrived example, but what I dislike about it is the two
lines of meta programming that serve the same purpose: dynamically adding
something to the including class. Also, the &lt;code class=&quot;highlighter-rouge&quot;&gt;define_greeter&lt;/code&gt; class method is
probably not needed anywhere else in the class and this is against my sense of
aesthetics.&lt;/p&gt;

&lt;p&gt;Now, how about &lt;strong&gt;dynamically creating a module&lt;/strong&gt; and then including that one?
Like … a module factory? How do we even start? It’s actually quite easy: the
&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; statement only accepts arguments of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;. So all we have to
make sure that whatever we pass to &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; returns a proper Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;.
I give you this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleFactory&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Yes, it&#39;s a class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# overriding the constructor&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Important: We don&#39;t return an instance of ModuleFactory here. The&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# (implicit) return value is the anonymous module.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ModuleFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:evening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good evening!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evening&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good evening!&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila! &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleFactory.new(…)&lt;/code&gt; returns a module which can be included, thus
combining the include statement with the dynamic meta-programming. The provided
examples are all a bit abstract but I will provide a more concrete (Rails 5!)
example in a follow-up post.&lt;/p&gt;
</description>
				<pubDate>Fri, 11 Mar 2016 16:34:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2016/03/11/include-a-module-with-parameters/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/03/11/include-a-module-with-parameters/</guid>
			</item>
		
			<item>
				<title>Computational web services with R programming language</title>
				<description>&lt;p&gt;If you encounter computational problems of certain complexity, the &lt;a href=&quot;https://www.r-project.org/&quot;&gt;R programming language&lt;/a&gt;
is most probably a good tool of choice to satisfy your needs. The main tasks R was developed for
were dealing with large datasets, statistical analysis and computation. Within this area it has become
a solid, mature open source platform, widely used in academia.&lt;/p&gt;

&lt;p&gt;What I like about R is that the barriers for usage are low: It’s freely available for nearly 
every major UNIX enviornment and Windows, it can be used within a special stand-alone stable &lt;a href=&quot;https://www.rstudio.com/home/&quot;&gt;IDE&lt;/a&gt;
that is very pleasant for beginners or just by the command line if you’re used to.&lt;/p&gt;

&lt;p&gt;In addition to that its maturity has grown so far that even people 
whithout a degree in mathematics or computer science can have access to advanced statistical 
techniques in a well designed manner for their projects.&lt;/p&gt;

&lt;p&gt;Most of a web dev’s day-to-day business possibly lives in another neighborhood. The barycenter 
of web development is organizing the communication of participants of several distributed systems. 
Its far more often dealing with applications talking HTTP (the lingua franca of web applications!) 
to each other than optimizing specific algorithms w.r.t to numerical issues or similar.&lt;/p&gt;

&lt;p&gt;But for me the connection of both worlds is very interesting and fruitful: 
Employing statistical methods can be a benefit for a vast amount of web application types, 
that’s why it’s interesting to elaborate how this can be achieved. I’d like to describe one 
possible way here.&lt;/p&gt;

&lt;h3 id=&quot;a-web-application-in-r&quot;&gt;A web application in R&lt;/h3&gt;

&lt;p&gt;The most natural approach would be to implement the desired algorithm and the web application
in the same language. As mentioned, R is a swiss knife for mathematical
flavoured problems related to data. But in 2016 most web applications were 
not typically written in R and I admit this felt a bit unfamiliar for me, too.&lt;/p&gt;

&lt;p&gt;Thanks to the work that a lot of people who put a lot effort into additional libraries of R it 
actually &lt;em&gt;is&lt;/em&gt; possible and as it turns out it’s not that complicated. Therefore I’d like to 
explore with you an hello-world example of writing a small web application 
completely in R. I’d like to share a &lt;code class=&quot;highlighter-rouge&quot;&gt;Hello world!&lt;/code&gt;-example of such a web application: 
It will take a query string from the URL and serves some basic JSON output including that parameter.&lt;/p&gt;

&lt;p&gt;We are going to use a library for &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;Rook&lt;/code&gt;. If you ever have seen some web development code
in Ruby, you surely will have faced &lt;a href=&quot;http://rack.github.io/&quot;&gt;Rack&lt;/a&gt; at some point. &lt;code class=&quot;highlighter-rouge&quot;&gt;Rack&lt;/code&gt; is a popular simple web server interface 
for Ruby. There are more really nice alternatives for doing web application relevant work in R (e.g. &lt;a href=&quot;http://shiny.rstudio.com/&quot;&gt;Shiny&lt;/a&gt; or
  &lt;a href=&quot;http://plumber.trestletech.com/&quot;&gt;plumber&lt;/a&gt;), but the final point where Rook got me 
  motivated a lot was because it was highly inspired by Rack - and I knew of the power of simplicity of Rack
  in the Ruby ecosystem. I am very thankful for having Rook since it was exactly what I was looking for my specific problem.&lt;/p&gt;

&lt;h3 id=&quot;resources-for-learning-basic-r-syntax&quot;&gt;Resources for learning basic R syntax&lt;/h3&gt;

&lt;p&gt;If you’re looking to learn the absolute basics with &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; try the 
&lt;a href=&quot;http://tryr.codeschool.com/&quot;&gt;free Code School course&lt;/a&gt; or have a look at the &lt;a href=&quot;https://cran.r-project.org/doc/manuals/r-devel/R-lang.html&quot;&gt;language definition&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let’s get started!&lt;/p&gt;

&lt;h3 id=&quot;installation-of-r&quot;&gt;(1/5) Installation of R&lt;/h3&gt;

&lt;p&gt;Installing R on a unixoide system should be pretty easy. My example lives on a Ubuntu machine,
so I’ll use this as reference. But you are encouraged trying it on other systems, too. It should be
possible!&lt;/p&gt;

&lt;p&gt;If you’re running Ubuntu you can install it from the universe sources via&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install r-base r-recommended 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Afterwards there will be a binary named &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; ready for you at th command line. 
Called without arguments it will open a R console for you. You can exit it by invoking the quit function &lt;code class=&quot;highlighter-rouge&quot;&gt;q()&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;R
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;s &amp;lt;- &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;1] &lt;span class=&quot;s2&quot;&gt;&quot;Hello&quot;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;q&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
Save workspace image? &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;y/n/c]: n
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;installation-of-rapache&quot;&gt;(2/5) Installation of &lt;code class=&quot;highlighter-rouge&quot;&gt;rApache&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;My example setup uses an Apache2 web server. In addition to the Apache web server
we need an extension called &lt;a href=&quot;rapache.net&quot;&gt;rApache&lt;/a&gt;. The installation for Ubuntu works
this way:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo add-apt-repository ppa:opencpu/rapache
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install libapache2-mod-r-base
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;installation-of-rook-library&quot;&gt;(3/5) Installation of &lt;code class=&quot;highlighter-rouge&quot;&gt;Rook&lt;/code&gt; library&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; has its own package/library management system called &lt;a href=&quot;https://cran.r-project.org/&quot;&gt;CRAN&lt;/a&gt;, which
basically is a network of ftp and web servers delivering R libraries to your machine. To
install the library ‘Rook’ from the &lt;code class=&quot;highlighter-rouge&quot;&gt;CRAN&lt;/code&gt; package sources, open a &lt;code class=&quot;highlighter-rouge&quot;&gt;R&lt;/code&gt; console and type&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;install.packages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Rook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Afterwards you can load the package when needed via&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Rook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;You can find detailed information of &lt;code class=&quot;highlighter-rouge&quot;&gt;Rook&lt;/code&gt; &lt;a href=&quot;https://cran.r-project.org/web/packages/Rook/Rook.pdf&quot;&gt;here in the documentation file&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;a-hello-world-example-of-rook&quot;&gt;(4/5) A Hello World example of Rook&lt;/h3&gt;

&lt;p&gt;Let’s examine how a Rook application has to look like. In the documentation you’ll find&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Rook application is an R reference class object that implements a ’call’ method or an R closure
that takes exactly one argument, an environment, and returns a list with three named elements:
‘status’, ‘headers’, and ‘body’.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here you can see how Rook quotes Rack: An application as a function of something
called an environment returning a list of status, header and a body! So basically we need an object 
we can invoke a function named &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt; on and we need to return a list 
containing the response data. But wait, let’s have small break here: What does &lt;code class=&quot;highlighter-rouge&quot;&gt;reference class&lt;/code&gt; mean?&lt;/p&gt;

&lt;p&gt;For historical reasons, R has three distinct object oriented systems
built in: S3 classes, S4 classes and so-called Reference classes. Each of these are 
slightly different and completely distinct to each other. They have in common that
these systems are providing (in different ways) object orientation mechanisms for the 
R language.&lt;/p&gt;

&lt;p&gt;Let’s concentrate on Reference Classes, or short refclasses, which are introduced in R v2.12. Even there
is complexity under the hood, let’s simply think of it of a way of defining class-like structures in R. We can define
a new refclass by&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Monkey&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRefClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Monkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Afterwards one can create instances (“objects”) of a refclass by&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;leila&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Monkey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;leila&lt;/code&gt; is now a ‘Reference class object of class “Monkey”’.&lt;/p&gt;

&lt;p&gt;Heading back to the definition of a Rook application this means two things for us: 
We have to implement our application logic as a function that returns the desired list with status, header information and a response body.
Then we need to “attach” this function to a refclass. After this 
we can construct “instances” of our application that can be used somewhere else.&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;h1&amp;gt;Hello World!&amp;lt;/h1&amp;gt;&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
  &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;text/html&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_factory&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setRefClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;HelloWorld&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Having this above we cann create an instance of the refclass &lt;code class=&quot;highlighter-rouge&quot;&gt;HelloWord&lt;/code&gt; and invoke the function &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# generate a fresh application
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application_factory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 

&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# Now invoke the application with an empty environment
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# … just an empty Array
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# will return a list with status, header and body
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If the whole refclass thing confuses you here’s the good message: 
You don’t need to state this as explicit as done above. It’s enough
to implement the raw logic part as a function returning a list. 
With having a function &lt;code class=&quot;highlighter-rouge&quot;&gt;hello_rook&lt;/code&gt; returning a list of
status, header and body you can bind our application to a server by calling 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Rook::Server$call(hello_rook)&lt;/code&gt;. The rest is maintained by Rook internally
then¹. Here’s a running example:&lt;/p&gt;

&lt;div class=&quot;language-R highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;library&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Rook&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello_rook&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_input&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QUERY_STRING&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;paste&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;{&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&quot;status&quot;: 200,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&quot;input&quot;:&quot;&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query_input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&quot;,&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;}&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;200L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Content-Type&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;application/json&#39;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rook&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello_rook&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;point-your-apache-server-to-your-r-app&quot;&gt;(5/5) Point your Apache server to your R app&lt;/h3&gt;

&lt;p&gt;We’re almost finished, all pieces of the puzzle are on the table
now. To “start” your app you just have to invoke &lt;code class=&quot;highlighter-rouge&quot;&gt;rApache&lt;/code&gt; and
tell your Apache where to look for the script. Head for
your Apache config file (mine is located in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/&lt;/code&gt;). 
Add the following snippet to use &lt;code class=&quot;highlighter-rouge&quot;&gt;rApache&lt;/code&gt; to run your Rook script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LoadModule R_module           /apache/module/path/mod_R.so

&amp;lt;Location /hello_rook&amp;gt;
    SetHandler r-handler
    RFileHandler /home/robin/hello_rook/hello_rook.R
&amp;lt;/Location&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://YOUR_HOST_APACHE_WAS_BOUND_TO/hello_rook&lt;/code&gt;
you can inspect your sample JSON output!&lt;/p&gt;

&lt;p&gt;If you visit &lt;code class=&quot;highlighter-rouge&quot;&gt;http://YOUR_HOST_APACHE_WAS_BOUND_TO/hello_rook?Yeah!&lt;/code&gt;
your JSON input should have reflected your query input “Yeah!”.&lt;/p&gt;

&lt;h3 id=&quot;ok-where-to-go-now&quot;&gt;Ok. Where to go now?&lt;/h3&gt;

&lt;p&gt;The problem I’m currently working on is passing data into the R application. You 
can simply put large CSV files onto the server, loading them with R is
pretty natural. But up to now I have not tried to catch and parse POST requests 
with Rook. R is able to maintain a database connection (e.g. with Postgres), too, but
that’s another undiscovered (yet interesting!) area for me 😉&lt;/p&gt;

&lt;p&gt;Thanks for reading and happy coding!&lt;/p&gt;

&lt;p&gt;¹) In fact I’m not really certain how this works. So finally I decided to document it how 
&lt;em&gt;I&lt;/em&gt; understood it. Maybe that information is not 100% correct. If you know better, 
I’d be happy if you’d tell me.&lt;/p&gt;
</description>
				<pubDate>Fri, 04 Mar 2016 05:30:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2016/03/04/computational-web-services-with-R/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/03/04/computational-web-services-with-R/</guid>
			</item>
		
			<item>
				<title>Let's work together during RGSoC 2016!</title>
				<description>&lt;p&gt;&lt;a href=&quot;http://railsgirlssummerofcode.org&quot;&gt;Rails Girls Summer of Code&lt;/a&gt; (»RGSoC«) is a three-month
scholarship to allow women to work on Open Source projects fulltime and by this, fostering
diversity in Open Source culture.&lt;/p&gt;

&lt;p&gt;ABSOLVENTA’s dev team is completely in &amp;lt;3 with the program since its first edition back in 2013
where we coached a team of &lt;a href=&quot;http://highwaytorails.tumblr.com&quot;&gt;two super awesome women&lt;/a&gt;.
It was (and still is) so great to see how the summer of 2013 became the start of two new careers
in web development.&lt;/p&gt;

&lt;p&gt;We totally want to do this again!&lt;/p&gt;

&lt;p&gt;If you are Berlin-based and would like to apply for this year’s RGSoC, we want to be your
&lt;a href=&quot;http://railsgirlssummerofcode.org/guide/coaching-company&quot;&gt;»coaching company«&lt;/a&gt;.
We can offer you:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Desk space in our office at Friedrichstrasse (if needed: iMac included)&lt;/li&gt;
  &lt;li&gt;A team of six Ruby/Rails/JS devs to coach you&lt;/li&gt;
  &lt;li&gt;An inclusive culture and a super friendly work-atmosphere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Rails Girls Summer of Code is language agnostic and there is indeed a host of
&lt;a href=&quot;https://teams.railsgirlssummerofcode.org/projects&quot;&gt;accepted projects&lt;/a&gt; that are non-Ruby
ones, we can only really coach Ruby and Rails projects (together with JS and CSS magic):
this is where we have knowledge to share.&lt;/p&gt;

&lt;p&gt;We are happy to assist in any (Ruby)project you wish, but you may want to consider
applying for the &lt;a href=&quot;https://teams.railsgirlssummerofcode.org/projects/106-rails-girls-summer-of-code-the-teams-app&quot;&gt;RGSoC Teams App&lt;/a&gt;:
Yours truly ended up being on the RGSoC Core team in 2014 and so the mentor of
that project would sit right next to you*.&lt;/p&gt;

&lt;p&gt;So, if you are interested: please don’t hesitate to &lt;a href=&quot;mailto:carsten.zimmermann@absolventa.de&quot;&gt;get
in touch&lt;/a&gt; – we are looking forward to hearing from you!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*) That being said, applying for the RGSoC Teams App and with ABSOLVENTA as a
coaching company doesn’t mean that your application will automatically be accepted.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;PS: If you’re not interested in applying for the Summer of Code but are otherwise interested
in supporting the program, we have a &lt;a href=&quot;http://railsgirlssummerofcode.org/campaign/&quot;&gt;crowdfunding program&lt;/a&gt; running :)&lt;/p&gt;
</description>
				<pubDate>Thu, 25 Feb 2016 14:43:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2016/02/25/we-want-to-work-with-you-during-rgsoc-2016/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/02/25/we-want-to-work-with-you-during-rgsoc-2016/</guid>
			</item>
		
			<item>
				<title>Exploring the Levenshtein algorithm with Ruby</title>
				<description>&lt;p&gt;Today I’d like to introduce you to an algorithm I stumbled over already tiwce
and that I really like because of its simple idea to address the non-trivial
problem to &lt;em&gt;quantify&lt;/em&gt; the similarity of two strings: The Levenshtein algorithm.&lt;/p&gt;

&lt;p&gt;The algorithm determines the so-called Levenshtein distance of two strings
which is a natural number. It’s an example of the mathematical technique of 
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Dynamic_programming&quot;&gt;Dynamic Programming&lt;/a&gt;&lt;/em&gt; 
and was invented by the Russian mathematician &lt;a href=&quot;http://www.keldysh.ru/departments/dpt_10/lev.html&quot;&gt;Vladimir Levenshtein&lt;/a&gt; already 
in 1965. The algorithm is used by some major companies (e.g. Yahoo!) in 
production environments until today.&lt;/p&gt;

&lt;h3 id=&quot;how-it-works&quot;&gt;How it works&lt;/h3&gt;

&lt;p&gt;The core idea is to measure similarity by the minimal number of &lt;em&gt;elementary transformations&lt;/em&gt;
that are needed to turn an arbitrary string &lt;em&gt;S&lt;/em&gt; into another string, say &lt;em&gt;T&lt;/em&gt;. Here, 
&lt;em&gt;elementary transformations&lt;/em&gt; are defined as precisely three operations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a simple insertion of a single character to the string&lt;/li&gt;
  &lt;li&gt;a deletion of a single character of the string&lt;/li&gt;
  &lt;li&gt;a substitution of a single character by another&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Mathematically it works with a very elegant trick of computing
the Levenshtein distances of trivial substrings first (which is very easy) 
and then successively computing distances of more complex substrings by
only using previously evaluated values.&lt;/p&gt;

&lt;p&gt;The mathematical formalism is well-explained at &lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;wikipedia&lt;/a&gt; and other resources
and I’d like to focus on a walk-through example now. Let’s compute the Levenshtein distance of the words &lt;em&gt;cat&lt;/em&gt; and &lt;em&gt;cute&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Note that the empty word is denoted by &lt;em&gt;ε&lt;/em&gt;. Practically the algorithm is filling a table (a matrix) where the (i,j)-th entry will 
contain the Levenshtein distance¹ of the prefix of length &lt;em&gt;i&lt;/em&gt; of the first word and the prefix of the prefix of length &lt;em&gt;j&lt;/em&gt; of the 
second word.&lt;/p&gt;

&lt;p&gt;We emphasize the (technical) convention that every word starts with the empty word, so &lt;em&gt;cat&lt;/em&gt; can be written as &lt;em&gt;εcat&lt;/em&gt;. 
Therefore the first entry with indices (0,0) is the Levenshtein distance of the &lt;em&gt;0&lt;/em&gt;-prefix of &lt;em&gt;εcat&lt;/em&gt; and &lt;em&gt;εcute&lt;/em&gt;, which is the
distance of the empty word &lt;em&gt;ε&lt;/em&gt; with itself - which is simply zero. Furthermore, to construct any word of length &lt;em&gt;i&lt;/em&gt; 
starting with the empty word we simply need &lt;em&gt;i&lt;/em&gt; insertions. With this in mind it is 
easy to write down the first row immediately:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This translates as: It takes one elementary transformation to turn &lt;em&gt;ε&lt;/em&gt; into &lt;em&gt;εc&lt;/em&gt; (an insertion), two transformations
to turn &lt;em&gt;ε&lt;/em&gt; into &lt;em&gt;εca&lt;/em&gt; and so on. The first column can be obtained immediately with the same strategy:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;→&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;four&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insertions&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;are&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;needed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;turn&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cute&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s combine them. Our recurrence matrix &lt;em&gt;D&lt;/em&gt; has now the form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All we have to do is to fill the question mark entries by using only the previously computed values. This
is the point were we need to inspect the mathematical rules the algorithm postulates. Suppose we want to obtain the matrix entry (i, j) and
remember that this corresponds to the prefix of length &lt;em&gt;i&lt;/em&gt; of the word &lt;em&gt;εcat&lt;/em&gt; and prefix of length &lt;em&gt;j&lt;/em&gt; of the word &lt;em&gt;εcute&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;When the &lt;em&gt;i&lt;/em&gt;-ith character of the first word &lt;em&gt;S&lt;/em&gt; exactly matches the &lt;em&gt;j&lt;/em&gt;-th character of the second word &lt;em&gt;T&lt;/em&gt; we have
the optimal case. No “operation” is required, the global costs are the same as for the distance of the (i-1)-th and the (j-1)-th 
distances of the words, that is in that case. So we take the matrix entry &lt;em&gt;(i-1, j-1)&lt;/em&gt; and put it into &lt;em&gt;(i, j)&lt;/em&gt; as well.
Otherwise the characters do not match. We have execute one of the elementary operations. But which one? Here’s the answer:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;D_{i, j} = \min \big [ \text{insertion costs}, \text{deletion costs}, \text{substitution costs} \big ] + 1&lt;/script&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;insertion costs&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;deletion costs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;substitution costs&lt;/code&gt; are nothing else
than values of neighbor matrix entries we already have computed! So have a look to the neighbors, 
choose the one with mininal costs and add &lt;em&gt;+1&lt;/em&gt; to its costs, because we need exactly one more operation
compared to that “minimal” neighbor. Notice that here we have chosen some kind of optimal &lt;em&gt;path&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s see how it works for our example matrix above. For the entry (1,1) we have the optimal case: 
A &lt;em&gt;c&lt;/em&gt; is added for both sides (when starting with &lt;em&gt;ε&lt;/em&gt;) and since the same character is added on both sides 
the Levenshtein distance stays zero because it was for the upper-left neighbor. And it matches the 
intuition if you recapitulate that entry (1,1) means the distance between &lt;em&gt;εc&lt;/em&gt; and &lt;em&gt;εc&lt;/em&gt;, which still
is the same string.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the situation gets more interesting. Let’s focus on the second row, where two question
marks are left. The more left question mark is the entry &lt;em&gt;(2, 1)&lt;/em&gt; and corresponds to the
distance of &lt;em&gt;εca&lt;/em&gt; and &lt;em&gt;εc&lt;/em&gt;. The algorithm now postulates looking for the minimal distance
relative to previously computed substrings. The already-computed neighbors have values &lt;em&gt;2&lt;/em&gt;,
&lt;em&gt;1&lt;/em&gt; and &lt;em&gt;0&lt;/em&gt;. The mininal one is &lt;em&gt;0&lt;/em&gt;. We now take the minimal value (0) and add +1 to it to obtain
the value for &lt;em&gt;(2, 1)&lt;/em&gt;. This procedure is repeated successively for each question mark left. If we
consequently do this we obtain:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
 &lt;span class=&quot;err&quot;&gt;ε&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; 
 &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;… and finally the matrix entry (m, n) where &lt;em&gt;m&lt;/em&gt; is the length of the first string and &lt;em&gt;n&lt;/em&gt; is the length of the second string
is defined as the Levenshtein distance of the two strings. So we have determinded the Levenshtein distance of &lt;em&gt;cat&lt;/em&gt; and 
&lt;em&gt;cute&lt;/em&gt;: &lt;em&gt;2&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;implementation&quot;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;When I reasoned if the algorithm would be good choice for our specific problem I immediately
started hacking together some naive lines in my editor. I knew there were several stable implementations 
out there and my solution most probably wouldn’t add any new feature nor would have significant performance improvements,
but I wanted to go through the algorithm on my own step by step. So basically I started reimplenting
it. But why reinvent the wheel?&lt;/p&gt;

&lt;p&gt;As developers we’re used to the common folklore law of &lt;em&gt;You-simply-should-not-reinvent-the-wheel&lt;/em&gt;. This is 
absolutely valid when it comes to the question what to use in production environments (think of
cryptography!). But if you’re interested in extending your toolset of concepts the answer is different: Rebuilding the 
algorithm on your own - independent of its difficulty - will make you learn something more than &lt;em&gt;Copy&amp;amp;Paste&lt;/em&gt;. It’s the
same phenomenon that transcribing something from the blackboard in school by yourself will pay off way more than simply photocopying your neighbor’s notes 😉 .&lt;/p&gt;

&lt;p&gt;By the way, there is no specific advantage in choosing Ruby here. You’re fine to use any turing complete programming 
language that you like and do the same. Of course there already are plenty of Ruby variants of
the Levenshtein algorithm, for example I found a very minimalistic implementation &lt;a href=&quot;http://rosettacode.org/wiki/Levenshtein_distance#Ruby&quot;&gt;here&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Levenshtein&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;distance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# i == 0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# j == 0; nw is lev(i-1, j)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;costs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Its pretty minified² but therefore hard to read when you want to learn how to
apply the algorithm by youself. I felt the drive for giving it more structure (and therefore
bloating it intentionally). The first object I focused on was
the so-called &lt;em&gt;recurrence matrix&lt;/em&gt;, usually called &lt;em&gt;D&lt;/em&gt; symbolized by the &lt;code class=&quot;highlighter-rouge&quot;&gt;costs&lt;/code&gt; Array in the
minimalistic version. This is the table we filled in the example above. For me it felt like an own container data type
(in the fashion of a monad), a somewhat supercharged Array. So I defined an own class for it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RecurrenceMatrix&lt;/span&gt;

    &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:store&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;[]=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The crucial point here is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;RecurrenceMatrix&lt;/code&gt; automatically
fills the entries that are initially known. This container class may look
overengineered here, but note that one can explicitly say&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RecurrenceMatrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;which I really like because it says without any comment what it is, what its purpose
is and how to use it (“Matrix” in the class name implictly gives the hint to the 
user to make use of the operator &lt;code class=&quot;highlighter-rouge&quot;&gt;:[]&lt;/code&gt;, at least this is what I would expect).&lt;/p&gt;

&lt;p&gt;Then I thought about how the outer API of my fictional class &lt;code class=&quot;highlighter-rouge&quot;&gt;LevenshteinDistance&lt;/code&gt; could look like. The Levenshtein distance
is a natural number³, so what I had in mind is&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;result = LevenshteinDistance.new(&#39;cat&#39;, &#39;cute&#39;).to_i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_i&lt;/code&gt; method glues the successive computations together
and returns the last value computed. Here, &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt; is a recurrence matrix
as reasoned above.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LevenshteinDistance&lt;/span&gt;
    
    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;costs_for_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only item missing is the computation of the costs for each matrix entry. Here’s what I 
did based on the mathematical formulation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LevenshteinDistance&lt;/span&gt;
    
    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;


    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;same_character_for_both_words_is_added?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;obtain_minimal_value_from_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; 
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;costs_for_step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;same_character_for_both_words_is_added?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;obtain_mininal_value_from_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One could take this one step more consequent and move all the computation logic inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;RecurrenceMatrix&lt;/code&gt;.
But alltogether the state above felt fine to me and made me ready for switching to use a more performant implementation relying on C instead :)&lt;/p&gt;

&lt;p&gt;Note that my implementation works well for strings that aren’t long, say below 500 characters. During my heuristically flavoured 
(and therefore non-scientific) benchmark on my local machine it took 1.28 seconds to compute the 
Levenshtein distance of strings of length 1000 and ~30 seconds to compute the Levenshtein distance of 
strings of length 10000. Theoretically the algorithm itself is of complexity &lt;em&gt;O(mn)&lt;/em&gt; where &lt;em&gt;m&lt;/em&gt; and &lt;em&gt;n&lt;/em&gt; are the sizes 
of the input strings. So in conclusion, to compare really large strings you may want to use a Ruby gem 
that relies on native C code extensions or similar like&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dbalatero/levenshtein-ffi&quot;&gt;levenshtein-ffi&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/GlobalNamesArchitecture/damerau-levenshtein&quot;&gt;damerau-levenshtein&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;

&lt;p&gt;I hope you feel encouraged now playing with algorithms or other concepts from academia that are unknown to you!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Absolventa/levenshtein_rb/blob/master/lib/levenshtein_rb/levenshtein_distance.rb&quot;&gt;source code&lt;/a&gt; 
of the implementation discussed here&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Levenshtein_distance&quot;&gt;Levenshtein algorithm at wikipedia&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://julesjacobs.github.io/2015/06/17/disqus-levenshtein-simple-and-fast.html&quot;&gt;A very interesting blogpost&lt;/a&gt; that takes things one step further
and includes thoughts about optimizations and the Levenshtein algorithm seen from an autmata theory perspective (including a Python implementation)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://web.stanford.edu/class/cs124/lec/med.pdf&quot;&gt;A presentation that&lt;/a&gt; summarizes more related variants and optimization ideas&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;¹) I implictly defined the &lt;em&gt;cost&lt;/em&gt; of each operation as +1 as it is “per default”. This can be modified
of course, but this is not in the scope of this write-up. Just keep in mind
that this is a feature that can be adjusted.&lt;/p&gt;

&lt;p&gt;²) … which is totally okay because it was intended as a short concise implementation there!&lt;/p&gt;

&lt;p&gt;³) It’s completely off the topic, but an interesting philosophical question indeed: The discussion if zero is treated &lt;a href=&quot;http://math.stackexchange.com/questions/283/is-0-a-natural-number&quot;&gt;as a natural number or not&lt;/a&gt; 😉&lt;/p&gt;
</description>
				<pubDate>Tue, 24 Nov 2015 09:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2015/11/24/exploring-levenshtein-algorithm-with-ruby/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2015/11/24/exploring-levenshtein-algorithm-with-ruby/</guid>
			</item>
		
			<item>
				<title>Lazy Logic: Efficiently Reduce An Array To A Boolean</title>
				<description>&lt;p&gt;Robin and I have been playing around with reducing a list using the &lt;code class=&quot;highlighter-rouge&quot;&gt;to_proc&lt;/code&gt;‘ed
version of the logical &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; operator. It started out whether something like
&lt;code class=&quot;highlighter-rouge&quot;&gt;my_list.reduce(:&#39;&amp;amp;&amp;amp;&#39;)&lt;/code&gt; would make it through the Ruby interpreter
(spoiler alert: it doesn’t, it returns &lt;em&gt;NoMethodError: undefined method ‘&amp;amp;&amp;amp;’ for true:TrueClass&lt;/em&gt; instead).&lt;/p&gt;

&lt;p&gt;Since we were dealing with a list of booleans, the next best thing is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the way, there’s an alternative way of calling reduce/inject with an initial
value and a block in the form of &lt;code class=&quot;highlighter-rouge&quot;&gt;my_list.reduce(false) { |memo, obj| memo &amp;amp;&amp;amp; obj }&lt;/code&gt;
that I wasn’t aware of:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&amp;amp;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Reduce using a logical &lt;code class=&quot;highlighter-rouge&quot;&gt;AND&lt;/code&gt; can be done with the &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#all?&lt;/code&gt; and for me,
reading a predicate method is far less cognitive load than passed Procs /
Symbols.&lt;/p&gt;

&lt;p&gt;What we wanted to know is how clever &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#all?&lt;/code&gt; is in terms of lazy
boolean evaluation. Will it stop iterating when the result is already clear?&lt;/p&gt;

&lt;p&gt;Quick recap: if you &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; three expressions and the first two already evaluate
to false, Ruby instantly breaks the evaluation: there is no way that an already
falsy statement will return &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;‘ed. A good way to take
advantage of this smart feature is putting the cheap calculations first and the
more expensive ones on the right side of the expression.&lt;/p&gt;

&lt;p&gt;Our &lt;code class=&quot;highlighter-rouge&quot;&gt;irb&lt;/code&gt; test scenario looked like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;fail&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Iteration should have stopped before :(&#39;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ƛ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;ƛ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We didn’t see the exception, meaning that &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#all?&lt;/code&gt; indeed stopped after
evaluating the first two elements. Good!&lt;/p&gt;

&lt;p&gt;The use of lambdas as elements instead of eagerly evaluated objects was for our
quick test, but it also allows taking the concept of evaluating the most
expensive expressions last (see recap above) one step further:
When an array is instantiated, all elements will be evaluated. Having lambdas/procs
as elements will defer their evaluation and we can iterate over “cheap” items
when reducing them with logical operators.&lt;/p&gt;

&lt;p&gt;Imagine this example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;cheap1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cheap2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expensive1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;expensive2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cheap1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cheap2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expensive1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expensive2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;all?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:call&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There is .5 chance that &lt;code class=&quot;highlighter-rouge&quot;&gt;expensive1&lt;/code&gt; will never have to be &lt;code class=&quot;highlighter-rouge&quot;&gt;call&lt;/code&gt;ed (in this case:
eliminating a 10 second wait-time) and it will &lt;em&gt;never&lt;/em&gt; run &lt;code class=&quot;highlighter-rouge&quot;&gt;expensive2&lt;/code&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 12 Nov 2015 15:04:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2015/11/12/lazy-logic-efficiently-reduce-an-array-to-a-boolean/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2015/11/12/lazy-logic-efficiently-reduce-an-array-to-a-boolean/</guid>
			</item>
		
			<item>
				<title>Instant Local Nginx SSL/TLS Proxy</title>
				<description>&lt;p&gt;Ideally, your Rails app just has &lt;code class=&quot;highlighter-rouge&quot;&gt;config.force_ssl = true&lt;/code&gt; configured for its
production environment. However, if you have TLS- and non-TLS contexts in
your app, things become tricky to test on your local development machine.&lt;/p&gt;

&lt;p&gt;For &lt;a href=&quot;http://12factor.net/dev-prod-parity&quot;&gt;Dev/Prod Parity&lt;/a&gt;, I want to have the
same SSL setup locally as on staging/production. Documentation for setting up
a local Nginx instance &lt;a href=&quot;http://www.cyberciti.biz/faq/howto-linux-unix-setup-nginx-ssl-proxy/&quot;&gt;is readily available&lt;/a&gt;,
but it’s verbose and involves too many manual steps.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-05-20-nginx-ssl-automate-all-the-things.jpg&quot; alt=&quot;Automate all the things!&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I’ve written a shell script to automate the happy path of the Nginx setup,
namely installing Nginx, creating a self-signed SSL-certificate, writing the
reverse-proxy config directives and optionally starting the Nginx webserver
right away. The latter requires &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo&lt;/code&gt; superpowers since binding to the SSL
default port 443 requires root privileges. Furthermore, it makes a few
assumptions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;You’re using Mac and Homebrew&lt;/li&gt;
  &lt;li&gt;You don’t have Nginx installed or don’t care about config files being overwritten&lt;/li&gt;
  &lt;li&gt;Your Rails app is running on localhost:3000&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can download the script from &lt;a href=&quot;https://raw.githubusercontent.com/Absolventa/dotfiles/master/nginx-ssl-setup.sh&quot;&gt;Absolventa’s Github repo&lt;/a&gt;.
Run it on your machine with &lt;code class=&quot;highlighter-rouge&quot;&gt;bash nginx-ssl-setup.sh&lt;/code&gt; and follow the instructions on your terminal.
If you stray from the Happy Path™, feel free to send a PR our way!&lt;/p&gt;

</description>
				<pubDate>Wed, 20 May 2015 17:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2015/05/20/use-nginx-to-enable-ssl-tls-for-your-rails-development/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2015/05/20/use-nginx-to-enable-ssl-tls-for-your-rails-development/</guid>
			</item>
		
	</channel>
</rss>
