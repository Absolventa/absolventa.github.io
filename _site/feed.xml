<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Devnull</title>
		<description>The blog of the ABSOLVENTA Dev Team</description>
		<link>http://devnull.absolventa.de</link>
		<atom:link href="http://devnull.absolventa.de/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>A Lightweight Firewall/Blacklist as Rack-Middleware</title>
				<description>
&lt;p&gt;I recently fell in love with &lt;a href=&quot;http://railscasts.com/episodes/151-rack-middleware&quot;&gt;Rack middleware&lt;/a&gt;. Rack’s simplicity of serving web requests by nothing but an &lt;code&gt;Array&lt;/code&gt; with three elements alone is charming. But using it as a bouncer to handle (and possibly already return) all sorts of stuff before your requests even touch your Rails app is the &lt;em&gt;real&lt;/em&gt; appeal.&lt;/p&gt;

&lt;p&gt;We had an annoying bot hitting one of our applications today. There was no harm done but while it was nowhere near a &lt;a href=&quot;http://en.wikipedia.org/wiki/Denial-of-service_attack&quot; title=&quot;Denial of Service&quot;&gt;DoS&lt;/a&gt;, its requests did put some load on our servers. All requests came from one source IP and it would have been easy to block it on the network layer, but as we host our sites on Heroku, that was not an option.&lt;/p&gt;

&lt;p&gt;Enter a quick middleware hack:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;nc&#39;&gt;Firewall&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;Struct&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:app&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;

  &lt;span class=&#39;k&#39;&gt;class&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;self&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;blacklist&lt;/span&gt;
      &lt;span class=&#39;vi&#39;&gt;@blacklist&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;||=&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;192.0.2.1&amp;#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;].&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;freeze&lt;/span&gt; &lt;span class=&#39;c1&#39;&gt;# Example IP, see RFC 5735&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;

  &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;call&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;env&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;if&lt;/span&gt; &lt;span class=&#39;nb&#39;&gt;self&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;class&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;blacklist&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;include?&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;env&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;s1&#39;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;message&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;Your IP-address has been banned for security reasons.&amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
                &lt;span class=&#39;s1&#39;&gt;&amp;#39;If you feel this is a mistake, please contact &amp;#39;&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;+&lt;/span&gt;
                &lt;span class=&#39;s1&#39;&gt;&amp;#39;support@absolventa.de&amp;#39;&lt;/span&gt;
      &lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;mi&#39;&gt;403&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{},&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;[&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;message&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;]]&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;else&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;app&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;call&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;env&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It’s pretty good to test-drive as well: &lt;a href=&quot;https://gist.github.com/carpodaster/8807139#file-firewall_spec-rb&quot;&gt;take a look at the spec&lt;/a&gt;. There is nice article that &lt;a href=&quot;http://taylorluk.com/post/54982679495/how-to-test-rack-middleware-with-rspec&quot;&gt;illustrates how to test Rack-apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have our middleware classes stowed in &lt;code&gt;app/middleware&lt;/code&gt;. You can hook it in with a simple one-liner in your &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;config&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;middleware&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;insert_after&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;Rack&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;:&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:Runtime&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;Firewall&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Sure, you need a deployment for every new IP that needs to be blacklisted. But it’s fast and simple. You’re heartily invited to &lt;a href=&quot;https://gist.github.com/carpodaster/8807139#file-firewall-rb&quot;&gt;improve the code&lt;/a&gt; (send a PR our way).&lt;/p&gt;
</description>
				<pubDate>Tue, 04 Feb 2014 17:03:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/02/04/a-lightweight-firewall-blacklist-as-rack-middleware/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/02/04/a-lightweight-firewall-blacklist-as-rack-middleware/</guid>
			</item>
		
			<item>
				<title>Stubbing an invalid record for inherited_resources</title>
				<description>
&lt;p&gt;Saving a record in a controller has at least two outcomes: it can succeed or it can fail and you want to test this branching.&lt;/p&gt;

&lt;p&gt;In order to decouple a functional test from the concrete attributes or other states that define its validity, it’s good to skip the actual validation and stub it out instead.&lt;/p&gt;

&lt;p&gt;Stubbing a failing record for a create or update request is fairly easy for a vanilla controller:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyController&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;POST create&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;creates a record&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;receive&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:valid?&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;and_return&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kp&#39;&gt;true&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:create&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;change&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;count&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;fails to create a record&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;receive&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:valid?&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;and_return&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;kp&#39;&gt;false&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:create&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;not_to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;change&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;count&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, it isn’t that easy with &lt;a href=&quot;https://github.com/josevalim/inherited_resources&quot;&gt;inherited_recources&lt;/a&gt;. (or more accurately with &lt;a href=&quot;https://github.com/plataformatec/responders&quot;&gt;responders&lt;/a&gt; which is used behind the scenes). Inherited Resources considers a record invalid when it has &lt;code&gt;errors&lt;/code&gt; (see also &lt;a href=&quot;https://github.com/josevalim/inherited_resources/issues/38&quot;&gt;this issue&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here is an approach to properly stub record validity for use with Inherited Resources:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;c1&#39;&gt;# spec/support/advanced_validity_stubbing.rb&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;module&lt;/span&gt; &lt;span class=&#39;nn&#39;&gt;AdvancedValidityStubbing&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;def&lt;/span&gt; &lt;span class=&#39;nf&#39;&gt;stub_validity&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;klass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;validity&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;klass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;receive&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:valid?&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;and_return&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;validity&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;unless&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;validity&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;errors&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;=&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;klass&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;new&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;errors&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;errors&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;add&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:base&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;Stubbed to be bad&amp;#39;&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;klass&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;receive&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;ss&#39;&gt;:errors&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;and_return&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;(&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;errors&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;)&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;

&lt;span class=&#39;c1&#39;&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class=&#39;no&#39;&gt;RSpec&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;configure&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt; &lt;span class=&#39;o&#39;&gt;|&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;config&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;|&lt;/span&gt;
  &lt;span class=&#39;c1&#39;&gt;# ...&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;config&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;include&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;AdvancedValidityStubbing&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The modified controller spec may look like this:&lt;/p&gt;
&lt;div class=&#39;highlight&#39;&gt;&lt;pre&gt;&lt;code class=&#39;ruby&#39;&gt;&lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyController&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
  &lt;span class=&#39;n&#39;&gt;describe&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;POST create&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
    &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;creates a record&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;stub_validity&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kp&#39;&gt;true&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:create&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;change&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;count&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;

    &lt;span class=&#39;n&#39;&gt;it&lt;/span&gt; &lt;span class=&#39;s1&#39;&gt;&amp;#39;fails to create a record&amp;#39;&lt;/span&gt; &lt;span class=&#39;k&#39;&gt;do&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;stub_validity&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;p&#39;&gt;,&lt;/span&gt; &lt;span class=&#39;kp&#39;&gt;false&lt;/span&gt;
      &lt;span class=&#39;n&#39;&gt;expect&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;post&lt;/span&gt; &lt;span class=&#39;ss&#39;&gt;:create&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;not_to&lt;/span&gt; &lt;span class=&#39;n&#39;&gt;change&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;{&lt;/span&gt; &lt;span class=&#39;no&#39;&gt;MyModel&lt;/span&gt;&lt;span class=&#39;o&#39;&gt;.&lt;/span&gt;&lt;span class=&#39;n&#39;&gt;count&lt;/span&gt; &lt;span class=&#39;p&#39;&gt;}&lt;/span&gt;
    &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
  &lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;span class=&#39;k&#39;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
				<pubDate>Wed, 15 Jan 2014 17:58:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/01/15/stubbing-an-invalid-record-for-inherited_resources/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/01/15/stubbing-an-invalid-record-for-inherited_resources/</guid>
			</item>
		
			<item>
				<title>Binary Christmas Tree</title>
				<description>
&lt;p&gt;Season’s Greetings!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/binary_christmas_tree.gif&quot; alt=&quot;Merry Christmas&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ABSOLVENTA Dev-Team says: Merry (Christ|X)mas! From left to right: Mignon, Felix, Markus (kneeling) and Carsten, Daniel and Robin (standing). Image credit: Mignon.&lt;/p&gt;
</description>
				<pubDate>Wed, 18 Dec 2013 14:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2013/12/18/binary-christmas-tree/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2013/12/18/binary-christmas-tree/</guid>
			</item>
		
			<item>
				<title>Aggregate And Conquer</title>
				<description>
&lt;p&gt;Collecting stats is awesome. Analytical brains love being fed with stats. So let’s fire these tiny queries at our database asking for favourite customer choices of recent years and – meanwhile – grab a coffee … or write a book or a whole new app until your answer is served.&lt;/p&gt;

&lt;p&gt;Persisting events over years is no problem for modern database systems in general, but accessing them later could be. Of course, you can come over it anytime by pimping up your server or database setup. But often it’s not the best solution to scale a mid-size app artificially this way only because you want to save historical data.&lt;/p&gt;

&lt;p&gt;In our case, we’re deeply interested in pageview statistics related to templates for model instances of a Rails app. For that use case we created a custom Rails Engine (»Kanyotoku«) that provides this service for some of our bigger apps.&lt;/p&gt;

&lt;p&gt;And of course, when developing our tool, I directly ran into the problems as described above. To come over this, I was inspired by a &lt;a href=&#39;http://www.railstips.org/blog/archives/2011/06/28/counters-everywhere/&#39; target=&#39;_blank&#39;&gt;blog post&lt;/a&gt; by John Nunemaker, one of the creators of Gaug.es, a really awesome pageview tracking service. Even though most of his thoughts concern schemaless data, it was easy to adopt and modify these principles for a PostgreSQL system.&lt;/p&gt;

&lt;h3 id=&quot;be_writeheavy_but_readlazy&quot;&gt;Be write-heavy, but read-lazy&lt;/h3&gt;

&lt;p&gt;One of his ideas was choosing appropriate resolutions, i.e. time frame resolutions for your data. Let’s translate this principle as follows: Do we need to know how many pageviews occurred in the last ten minutes exactly? Is this really relevant?&lt;/p&gt;

&lt;p&gt;For our situation it was much more interesting to know the count of pageviews per month or maybe per day. It is also interesting for us to count it per year or for 3 months, but any smaller timeframe is nigh irrelevant for all our purposes.&lt;/p&gt;

&lt;p&gt;For that reason, we introduced daily and monthly reports that are saved and/or updated each time a pageview record is created. Of course this means we’re much more write-heavy than before.&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/7409048.js?file=pageviews.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;On each page visit, a pageview gets saved and written to the database and in addtion to that a daily report is created or updated if it exists for that day. A monthly report is handled the same way.&lt;/p&gt;

&lt;p&gt;All reports save the pageviews count of the related time frame as an integer column which is simply incremented if desired. As a result, we have done some pre-processing for data analysis in the backend - we have aggregated tables that fit perfectly to our range needs. In out backoffice data aggregation context, we can simply sum these integer values. If you’re interested in the pageviews of the last 5 years, you can collect your data like&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/7409097.js?file=elephant.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;Assumimg our elephant receives around 10,000 pageviews per year, it is great that we don’t have to load 50,000 pageview records. Summing up integer values of less than 5 * 12 = 60 reports should be an easy excercise for our database.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;In out situation, being a little more write heavy has no measurable negative impact on request times in our frontend context, but it highly improves out backoffice data aggregation performance – q.e.d!&lt;/p&gt;
</description>
				<pubDate>Mon, 11 Nov 2013 09:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2013/11/11/aggregate-and-conquer/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2013/11/11/aggregate-and-conquer/</guid>
			</item>
		
			<item>
				<title>Watching A Certificate Revocation List Using Event Girl</title>
				<description>
&lt;p&gt;ABSOLVENTA uses WPA2-Enterprise to control acccess to the company’s wifi network. Authentication is done using x509 certificates issued by our local, self-signed Certificate Authority (CA). We use a FreeRadius server on a &lt;a href=&quot;https://www.freebsd.org&quot;&gt;FreeBSD&lt;/a&gt; machine to check for the validity of the presented certificate.&lt;/p&gt;

&lt;p&gt;I wrote a simple &lt;abbr title=&#39;Command Line Interface&#39;&gt;CLI&lt;/abbr&gt; to faciliate the certificate management and to automatically configure the Radius server, including certificate revocation. The next-update field of the generated &lt;a href=&quot;http://en.wikipedia.org/wiki/Certificate_revocation_list&quot;&gt;certificate revocation list&lt;/a&gt; (CRL) file is set to +100 days whenever a certificate is revoked, assuming there will always be at least an intern who leaves the company within three months’ time.&lt;/p&gt;

&lt;p&gt;Yesterday morning, I was denied access to our wifi network. Working from an ethernet-less Macbook Air I had to wire myself somewhere to debug the problem. The Radius server was alive and kicking but looking at the logs it was evident that it couldn’t verify certificates anymore as its CRL was no longer valid.&lt;/p&gt;

&lt;p&gt;Regenerating a new CRL was easy enough, but it was clear that my initial assumption of »100 days is a safe enough bet« was false. I didn’t want to increase the lifetime of the CRL as an overly old CRL kind of defeats its purpose. I wrote a simple Ruby CRL parser named &lt;a href=&quot;https://github.com/Absolventa/crl_watchdog&quot;&gt;crl_watchdog&lt;/a&gt; and a shell script as an early warning system:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/7196906.js&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;The file resides in &lt;code&gt;/etc/periodic/daily&lt;/code&gt; which is FreeBSD’s equivalent of &lt;code&gt;/etc/cron.daily&lt;/code&gt; on most Linux distributions.&lt;/p&gt;

&lt;p&gt;You’ll notice the various &lt;a href=&quot;https://github.com/Absolventa/event_girl&quot;&gt;Event Girl&lt;/a&gt; statements: The shell script makes use of the &lt;a href=&quot;https://github.com/Absolventa/event_girl_client&quot;&gt;event_girl_client&lt;/a&gt; CLI. Event Girl is the outcome of the &lt;a href=&quot;http://railsgirlssummerofcode.org&quot;&gt;Rails Girls Summer of Code&lt;/a&gt; team &lt;a href=&quot;http://highwaytorails.tumblr.com&quot;&gt;Highway to Rails&lt;/a&gt; we’ve been hosting from July 1st to September 30th and it’s awesome.&lt;/p&gt;

&lt;p&gt;The Event Girl app has two event expectations: one »backward« expectation that will inform us when the daily script doesn’t run for whatever reason and a »forward« one which will send an email instantly when the CRL will expire within the next 14 days (as notified in line 20).&lt;/p&gt;

&lt;p&gt;Using Event Girl, I can not only make sure not to run into an outdated CRL again, but also feel at ease that the CRL actually remains being monitored. Also, I don’t have to bother about sending mails from the server and can leave that to the Event Girl app.&lt;/p&gt;
</description>
				<pubDate>Mon, 28 Oct 2013 15:34:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2013/10/28/watching-a-certificate-revocation-list-using-event-girl/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2013/10/28/watching-a-certificate-revocation-list-using-event-girl/</guid>
			</item>
		
			<item>
				<title>Rate Limiting Work On ActiveRecord::Base With .find_each In Edge Rails</title>
				<description>
&lt;p&gt;I was working with several maintenance tasks that query external webservices for a collection of ActiveRecord objects. In order to avoid hitting the webservices’ rate limit, we pause every other iteration for a fraction of a second before we continue.&lt;/p&gt;

&lt;p&gt;The code looks something like this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/6920157.js?file=old_code.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;I didn’t like that the information of our rate limit guard clauses was so scattered: there were bits before the block and others in the block. I had the urge to refactor it into a more concise form using a Ruby block itself.&lt;/p&gt;

&lt;p&gt;My idea was to create a method that takes the rate limit, the sleep time and an enumeration and then yield the elements of the enum to a block.&lt;/p&gt;

&lt;p&gt;I wrapped that method into a module and out came this:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/6920157.js?file=rate_limiter.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;This is how the specs look like:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/6920157.js?file=rate_limiter_spec.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;Unfortunately and unlike other enumerable methods, the batch finder &lt;code&gt;ActiveRecord::Base.find_each&lt;/code&gt; does not return an Enumerator when called without a block. Not in Rails 3.2 and not in Rails 4.0.&lt;/p&gt;

&lt;p&gt;Luckily, it has been solved in Edge Rails (see &lt;a href=&quot;https://github.com/rails/rails/commit/840c552047a660d0a66883fb9c0cb144d5e728fb&quot;&gt;840c552&lt;/a&gt;) and I quickly created a Rails 4.1.0.beta app to go for the following code:&lt;/p&gt;
&lt;script src=&#39;https://gist.github.com/6920157.js?file=external_service.rb&#39;&gt;&lt;![CDATA[ ]]&gt;&lt;/script&gt;
&lt;p&gt;&lt;code&gt;ActiveRecord::Base.find_each&lt;/code&gt; now returns a proper &lt;code&gt;Enumerator&lt;/code&gt; that can be passed into the rate limiter. If you want to learn more about Enumerators in Ruby (or if you’d like to refresh your memory), I can recommend this excellent &lt;a href=&quot;http://devblog.avdi.org/2013/09/10/rubytapas-freebie-enumerator/&quot;&gt;Ruby Tapas&lt;/a&gt; episode by &lt;a href=&quot;https://twitter.com/avdi&quot;&gt;Avdi Grimm&lt;/a&gt;.&lt;/p&gt;
</description>
				<pubDate>Thu, 10 Oct 2013 17:04:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2013/10/10/rate-limiting-with-activerecord-base-find_each-in-edge-rails/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2013/10/10/rate-limiting-with-activerecord-base-find_each-in-edge-rails/</guid>
			</item>
		
	</channel>
</rss>
