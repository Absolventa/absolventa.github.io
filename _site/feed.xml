<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Devnull</title>
		<description>The blog of the ABSOLVENTA Dev Team</description>
		<link>http://devnull.absolventa.de</link>
		<atom:link href="http://devnull.absolventa.de/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Custom negated matchers for RSpec</title>
				<description>&lt;p&gt;Keeping RSpec examples as atomic and lean as possible is a good rule of thumb.
Nevertheless, sometimes it makes sense to combine multiple expectations into
one test case - for example when the evaluation of the expression you want to test
is “expensive” in some sense.&lt;/p&gt;

&lt;p&gt;Let us study the Ruby class &lt;code class=&quot;highlighter-rouge&quot;&gt;Pirate&lt;/code&gt; and add some specs for it:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Pirate&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:mood&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@mood&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;other_pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;When a pirate instance is insulting another pirate,
this is affecting the fighter’s moods:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 10&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 11&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Let us turn this into proper test cases with RSpec. One way of expressing this is
writing down two seperate test cases:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But now let’s assume we really want to combine this into a single example
where the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;guybrush.insult(le_chuck)&lt;/code&gt; is only evaluated once.
One way to combine the expectations is wrapping one test into another,
like the &lt;a href=&quot;http://mathworld.wolfram.com/Composition.html&quot;&gt;composition of functions in mathematics&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;affects the fighting pirate&#39;s moods&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Unfortunately the probability is high that this strategy results in messy and
unreadable test code as soon as you combine 3 or more expectations.&lt;/p&gt;

&lt;p&gt;Better (imho) is using the neat method &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt; that RSpec provides:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;affects the fighting pirate&#39;s moods&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is really elegant, but problems arise once you want to include
tests for the fact that the corresponding expression &lt;code class=&quot;highlighter-rouge&quot;&gt;guybrush.insult(le_chuck)&lt;/code&gt;
does &lt;em&gt;not&lt;/em&gt; affect some other object.&lt;/p&gt;

&lt;p&gt;This is a priori not possible with the plain &lt;code class=&quot;highlighter-rouge&quot;&gt;and&lt;/code&gt;-method
above. But again RSpec has a really nice built-in solution for
this problem: Definition of custom negated matchers! It’s pretty simple:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This could live in your spec_helper.rb or wherever you configure RSpec&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Matchers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_negated_matcher&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:not_change&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:change&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Afterwards you can happily use the operator &lt;code class=&quot;highlighter-rouge&quot;&gt;not_change&lt;/code&gt;, the negated operator
to &lt;code class=&quot;highlighter-rouge&quot;&gt;change&lt;/code&gt; as we have defined above:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:otis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;let&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:carla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pirate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;affects the fighting pirate&#39;s moods&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;insult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;le_chuck&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guybrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;otis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not_change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carla&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mood&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Give credit where credit is due: I found this solution within a &lt;a href=&quot;https://stackoverflow.com/a/36724913/2159942&quot;&gt;StackOverflow answer&lt;/a&gt;. Thanks to
the author!&lt;/p&gt;
</description>
				<pubDate>Thu, 31 Aug 2017 10:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2017/08/31/custom_negated_matchers_with_rspec/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2017/08/31/custom_negated_matchers_with_rspec/</guid>
			</item>
		
			<item>
				<title>Authoring a Private Gem with Gemfury</title>
				<description>&lt;p&gt;We make an effort of extracting shared code into Gems. While
&lt;abbr title=&quot;Free and Open Source&quot;&gt;FOSS&lt;/abbr&gt; code
goes to RubyGems.org of course, our business-internal logic needs a
private Gem server. We use &lt;a href=&quot;https://gemfury.com/&quot;&gt;Gemfury&lt;/a&gt; as our host
but you can also roll your own with &lt;a href=&quot;https://github.com/bundler/gemstash&quot;&gt;bundler/gemstash&lt;/a&gt;
or &lt;a href=&quot;https://github.com/geminabox/geminabox&quot;&gt;Gem in a Box&lt;/a&gt;.
This article focuses on my workflow with Gemfury.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;Note: we are not affiliated with nor are we sponsored by said provider.&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;gem-skeleton&quot;&gt;Gem Skeleton&lt;/h2&gt;

&lt;p&gt;In order to create all the boilerplate code and to make sure I am following the latest
conventions, I use Bundler’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gem&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle gem lolwat --no-coc --no-mit
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;When I &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; into the created directory and load the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;lolwat.gemspec&lt;/code&gt;
into my editor, I can see that it already includes a setting for &lt;code class=&quot;highlighter-rouge&quot;&gt;allowed_push_host&lt;/code&gt;.
This prevents me from accidentally pushing proprietary code to RubyGems.org.&lt;/p&gt;

&lt;p&gt;Unfortunately, Gemfury.com doesn’t support a RubyGems compliant API to actually
push my released Gem so there’s no need to bother with changing the example host
to something real.&lt;/p&gt;

&lt;p&gt;Instead, we’ll add the following line to the project’s &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;gem_push&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;no&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We’ll get back to it later.&lt;/p&gt;

&lt;h2 id=&quot;gemfury-support&quot;&gt;Gemfury Support&lt;/h2&gt;
&lt;p&gt;In order to easily push to Gemfury.com, there a few more additions.
First we have to include the gemfury Gem to our &lt;code class=&quot;highlighter-rouge&quot;&gt;lolwat.gemspec&lt;/code&gt; file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;add_development_dependency&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;gemfury&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The second file we need to edit is our &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; again. Add the following code
to the end of the file:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Rakefile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Push lolwat-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lolwat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.gem to Gemfury.com&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:gemfury&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pkg/lolwat-&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Lolwat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;VERSION&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.gem&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;exist?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;system&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;fury push &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;STDERR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;E: gem `&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;package&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&#39; not found.&quot;&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here’s a set of shell commands that will automate all this:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;GEMNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;))&lt;/span&gt;
tail -r &amp;lt;&lt;span class=&quot;nv&quot;&gt;$GEMNAME&lt;/span&gt;.gemspec &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  |sed -E &lt;span class=&quot;s1&quot;&gt;&#39;1s/(.+)/\1\&#39;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$&#39;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;  spec.add_development_dependency &lt;span class=&quot;s2&quot;&gt;&quot;gemfury&quot;&lt;/span&gt;/&lt;span class=&quot;s1&quot;&gt;&#39; \
  |tail -r &amp;gt;_new.gemspec \
  &amp;amp;&amp;amp; mv _new.gemspec $GEMNAME.gemspec

GEMVERSION=&quot;$(grep module lib/$GEMNAME/version.rb|sed &#39;&lt;/span&gt;s/module //&lt;span class=&quot;s1&quot;&gt;&#39;)::VERSION&quot;
cat &amp;gt;&amp;gt;Rakefile &amp;lt;&amp;lt;EOF

desc &quot;$GEMNAME-#{$GEMVERSION}.gem to Gemfury.com&quot;
task :gemfury do
  package = &quot;pkg/$GEMNAME-#{$GEMVERSION}.gem&quot;
  if File.exist? package
    system &quot;fury push #{package}&quot;
  else
    STDERR.puts &quot;E: gem \`#{package}&#39;&lt;/span&gt; not found.&lt;span class=&quot;s2&quot;&gt;&quot;
    exit 1
  end
end

desc &quot;&lt;/span&gt;Gemfury&lt;span class=&quot;s2&quot;&gt;&quot;
task :release do
  Rake::Task[:gemfury].invoke
end
EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;small&gt;
Note: This has only been tested on Mac OS which
uses BSD sed. GNU sed (Linux) may behave differently.
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;prepare-release&quot;&gt;Prepare Release&lt;/h2&gt;

&lt;p&gt;While I’m hacking, I track completed features in a &lt;strong&gt;Changelog&lt;/strong&gt; section
in my &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt;. I list the changes under a &lt;strong&gt;HEAD&lt;/strong&gt; subsection.&lt;/p&gt;

&lt;div class=&quot;language-markdown highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gu&quot;&gt;## Changelog&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;### HEAD (not yet released)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Add foo to bar
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Fix: Baz not correctly responds to boo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Be sure to add your git &lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt; as explained by GitHub, GitLab, Bitbucket
or whichever provider you chose.&lt;/p&gt;

&lt;p&gt;For the first version, &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/lolwat/version.rb&lt;/code&gt; is already preconfigured
with &lt;code class=&quot;highlighter-rouge&quot;&gt;0.1.0&lt;/code&gt;. That’s a sensible default for a first version to play
around with. For later updates, increase the version number based on
&lt;a href=&quot;http://semver.org/#summary&quot;&gt;Semantic Versioning (»Semver«)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I prefer tracking the Changelog using the GitHub’s Release system
(I’ll get to that in a bit). To that end, I remove the bullet points
in my temporary »HEAD (not yet released) and commit the changed &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt;
together with the changed &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/lolwat/version.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &lt;span class=&quot;s1&quot;&gt;&#39;Release v0.2.0&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;release-the-kraken-gem&quot;&gt;Release the &lt;del&gt;Kraken&lt;/del&gt; Gem!&lt;/h2&gt;

&lt;p&gt;Together with our &lt;a href=&quot;#gemfury-support&quot;&gt;changes to the gemspec and Rakefile&lt;/a&gt;,
releasing the version is as simple as:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rake release
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It will create a git version tag, push everything to your git remote,
package the gemfile and upload the Gem file to Gemfury.&lt;/p&gt;

&lt;p&gt;The last step is to head over to your GitHub project page, select &lt;strong&gt;releases&lt;/strong&gt;
and &lt;strong&gt;Draft a new Release&lt;/strong&gt; in the upper right corner.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017-07-03-github-release-overview.png&quot; alt=&quot;GitHub Releases Overview&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ensuing form is pretty self-explanatory (check the explanations on
the right side). For the release name, I just repeat the tag name (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;v0.2.0&lt;/code&gt;).
The text area gets all the info from my temporary Changelog tracker in
the &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Create gem skeleton using &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle gem&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Adapt &lt;code class=&quot;highlighter-rouge&quot;&gt;Rakefile&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;*.gemspec&lt;/code&gt; to prevent pushes to public rubygems.org&lt;/li&gt;
  &lt;li&gt;Hackedy-hack-hack + track features/bugfixes in README&lt;/li&gt;
  &lt;li&gt;Update &lt;code class=&quot;highlighter-rouge&quot;&gt;version.rb&lt;/code&gt;, remove changelog info, commit and &lt;code class=&quot;highlighter-rouge&quot;&gt;rake release&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Create release on GitHub and paste changelog data&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Voilá!&lt;/p&gt;
</description>
				<pubDate>Mon, 03 Jul 2017 13:55:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2017/07/03/authoring-a-private-gem-with-gemfury/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2017/07/03/authoring-a-private-gem-with-gemfury/</guid>
			</item>
		
			<item>
				<title>We'd like to be your Coaching Company for RGSoC 2017!</title>
				<description>&lt;p&gt;&lt;a href=&quot;https://railsgirlssummerofcode.org&quot;&gt;Rails Girls Summer of Code&lt;/a&gt; (»RGSoC«) is a three-month
scholarship to allow women to work on Open Source projects fulltime and by this, fostering
diversity in Open Source culture.&lt;/p&gt;

&lt;p&gt;ABSOLVENTA’s development team is completely in &amp;lt;3 with the program since its first
edition back in 2013 where we coached a team of &lt;a href=&quot;http://highwaytorails.tumblr.com&quot;&gt;two super awesome
women&lt;/a&gt;. Last year we were again blessed
with a wonderful team of RGSoC students: the amazing &lt;a href=&quot;https://twitter.com/teamjoda2016&quot;&gt;Team
Joda&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We’re a bit late to the party compared to &lt;a href=&quot;/2016/02/25/we-want-to-work-with-you-during-rgsoc-2016/&quot;&gt;last year’s announcement&lt;/a&gt;
but here it goes: We totally want to do this again!&lt;/p&gt;

&lt;div class=&quot;alert&quot;&gt;We already have a team of students and are looking forward to host
&lt;a href=&quot;https://teams.railsgirlssummerofcode.org/teams/339&quot;&gt;Team berlin diamonds&lt;/a&gt;
this summer. Fingers crossed!&lt;/div&gt;

&lt;p&gt;If you are Berlin-based and would like to apply for this year’s RGSoC, we want to be your
&lt;a href=&quot;https://railsgirlssummerofcode.org/guide/coaching-company&quot;&gt;»coaching company«&lt;/a&gt;.
What we can offer:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Desk space in our office at Friedrichstrasse (if needed: iMac included)&lt;/li&gt;
  &lt;li&gt;A team of six Ruby/Rails/JS devs to coach you&lt;/li&gt;
  &lt;li&gt;An inclusive culture and a super friendly work-atmosphere&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While Rails Girls Summer of Code is language agnostic and there is indeed a host of
&lt;a href=&quot;https://teams.railsgirlssummerofcode.org/projects&quot;&gt;accepted projects&lt;/a&gt; that are non-Ruby
ones, we can only really coach Ruby and Rails projects (together with JS and CSS magic):
this is where we have knowledge to share.&lt;/p&gt;

&lt;p&gt;We are happy to assist in any (Ruby)project you wish, but you may want to consider
applying for the &lt;a href=&quot;https://teams.railsgirlssummerofcode.org/projects/106-rails-girls-summer-of-code-the-teams-app&quot;&gt;RGSoC Teams App&lt;/a&gt;:
Yours truly ended up being on the RGSoC Core team in 2014 and so the mentor of
that project could potentially sit right next to you*.&lt;/p&gt;

&lt;p&gt;So, if you are interested: please don’t hesitate to &lt;a href=&quot;mailto:carsten.zimmermann@absolventa.de&quot;&gt;get
in touch&lt;/a&gt; – we are looking forward to hearing from you!&lt;/p&gt;

&lt;p&gt;&lt;small&gt;*) That being said, applying for the RGSoC Teams App and with ABSOLVENTA as a
coaching company doesn’t mean that your application will automatically be accepted.&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;PS: If you’re not interested in applying for the Summer of Code but are otherwise interested
in supporting the program, we have a &lt;a href=&quot;https://railsgirlssummerofcode.org/campaign/&quot;&gt;crowdfunding program&lt;/a&gt; running :)&lt;/p&gt;
</description>
				<pubDate>Mon, 27 Feb 2017 11:59:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2017/02/27/we-wanna-be-your-coaching-company-for-rgsoc-2017/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2017/02/27/we-wanna-be-your-coaching-company-for-rgsoc-2017/</guid>
			</item>
		
			<item>
				<title>Converting a Latin1 encoded HTML Document with Elixir (1)</title>
				<description>&lt;p&gt;Elixir/Erlang gets some bad rep when it comes to String handling and the
encoding of character data. Also, detecting/guessing the content encoding just
based on heuristics is a &lt;a href=&quot;http://stackoverflow.com/questions/3034714/set-a-script-to-automatically-detect-character-encoding-in-a-plain-text-file-in&quot;&gt;reasonably hard problem&lt;/a&gt; to
solve.&lt;/p&gt;

&lt;p&gt;A recent Elixir/Phoenix project involved getting a remote HTML page with
&lt;a href=&quot;https://github.com/edgurgel/httpoison&quot; title=&quot;An Elixir HTTP library&quot;&gt;HTTPoison&lt;/a&gt;, modifying parts of it and returning the changed HTML
document. It works perfectly fine when the source document is in UTF-8 unicode,
but not so much when the source is ISO-8859-X (Latin1 and its siblings). This
two-parter illustrates two mechanisms to get hints about the source document’s
encoding.&lt;/p&gt;

&lt;p&gt;Let’s assume that the HTML document contains a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;meta http-equiv=&quot;Content-Type&quot;
content=&quot;text/html; charset=ISO-8859-1&quot; /&amp;gt;&lt;/code&gt; element in its document headers.&lt;/p&gt;

&lt;p&gt;I’ll cover two cases: first, if the &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; header response from the
remote webserver is missing (is that even allowed?) or not corresponding to
the actual encoding of the response body. And secondly, when the header and
the encoding match. Here goes the first part:&lt;/p&gt;

&lt;h2 id=&quot;part-1-the-proper-http-equiv-meta-element&quot;&gt;Part 1: The proper http-equiv meta element&lt;/h2&gt;

&lt;h3 id=&quot;guess-the-content-type-with-this-one-weird-trick&quot;&gt;Guess the content type with this one weird trick&lt;/h3&gt;

&lt;p&gt;Let’s employ &lt;a href=&quot;https://github.com/philss/floki&quot;&gt;Floki&lt;/a&gt; to get the header element from within the HTML document:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Latin1Convert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Retrieves the content type indication from `html`.

  iex&amp;gt;&quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta http-equiv=\&quot;Content-Type\&quot; content=\&quot;text/html; charset=ISO-8859-1\&quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;&quot; |&amp;gt; Latin1Convert.meta_http_equiv_encoding
  &quot;text/html; charset=ISO-8859-1&quot;

  iex&amp;gt;Latin1Convert.meta_http_equiv_encoding(&quot;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&quot;)
  &quot;&quot;
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;head &amp;gt; meta[http-equiv=content-type]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;content&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to_string&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s easier on my brain to map this to atoms:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Latin1Convert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Looks for a &amp;lt;meta http-equiv=&quot;Content-Type&quot;&amp;gt; node in the input
  string&#39;s HTML header and returns an atom representing the encoding.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type_from_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type_from_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iso&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8859&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:latin1&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;Regex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;match?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;utf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;ss&quot;&gt;:unicode&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See above&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;convert-and-purge-now-erroneous-markup&quot;&gt;Convert and purge (now) erroneous markup&lt;/h3&gt;

&lt;p&gt;The last step would be to convert the HTML input to UTF-8 using the underlying
Erlang library. However, we don’t want the HTML to identify as Latin1 anymore,
so we have to remove the &lt;code class=&quot;highlighter-rouge&quot;&gt;meta http-equiv&lt;/code&gt; tag:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Latin1Convert&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;@doc&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&quot;&quot;
  Convert an input HTML string to UTF-8 unicode.
  &quot;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;@spec&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;::&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type_from_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;cond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;content_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:latin1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:unicode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;characters_to_binary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:latin1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_meta_http_equiv_encoding&lt;/span&gt;
      &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Caveat: not really case-sensitive check for the DOM node.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Floki doesn&#39;t seem to understand `$=foo i` queries. We can&#39;t&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# `String.downcase` here as that will mess up the filter chain.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;remove_meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter_out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;head &amp;gt; meta[http-equiv*=ontent-]&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Floki&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;raw_html&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content_type_from_header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# see above&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;meta_http_equiv_encoding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See above&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The next part will cover how to take a matching &lt;code class=&quot;highlighter-rouge&quot;&gt;Content-Type&lt;/code&gt; HTTP header to
short-circuit the guesswork. Check out the file so far:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;defmodule Latin1Convert do

  @doc &amp;quot;&amp;quot;&amp;quot;
  Convert an input HTML string to UTF-8 unicode.
  &amp;quot;&amp;quot;&amp;quot;
  @spec call(String.t) :: String.t
  def call(html) do
    content_type = content_type_from_header(html)
    cond do
      content_type == :latin1 -&amp;gt;
        html
        |&amp;gt; :unicode.characters_to_binary(:latin1)
        |&amp;gt; remove_meta_http_equiv_encoding
      true -&amp;gt;
        html
    end
  end

  @doc &amp;quot;&amp;quot;&amp;quot;
  Looks for a &amp;lt;meta http-equiv=&amp;quot;Content-Type&amp;quot;&amp;gt; node in the input
  string&amp;#39;s HTML header and returns an atom representing the encoding.
  &amp;quot;&amp;quot;&amp;quot;
  @spec content_type_from_header(String.t) :: atom | nil
  def content_type_from_header(html) do
    encoding = meta_http_equiv_encoding(html)

    cond do
      Regex.match?(~r(iso-8859)i, encoding) -&amp;gt;
        :latin1
      Regex.match?(~r(utf-8)i, encoding) -&amp;gt;
        :unicode
      true -&amp;gt;
        nil
    end
  end

  @doc &amp;quot;&amp;quot;&amp;quot;
  Retrieves the content type indication from `html`.

  iex&amp;gt;&amp;quot;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;meta http-equiv=\&amp;quot;Content-Type\&amp;quot; content=\&amp;quot;text/html; charset=ISO-8859-1\&amp;quot;&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;/html&amp;gt;&amp;quot; |&amp;gt; Latin1Convert.meta_http_equiv_encoding
  &amp;quot;text/html; charset=ISO-8859-1&amp;quot;

  iex&amp;gt;Latin1Convert.meta_http_equiv_encoding(&amp;quot;&amp;lt;html&amp;gt;&amp;lt;/html&amp;gt;&amp;quot;)
  &amp;quot;&amp;quot;
  &amp;quot;&amp;quot;&amp;quot;
  @spec meta_http_equiv_encoding(String.t) :: String.t
  def meta_http_equiv_encoding(html) do
    String.downcase(html)
    |&amp;gt; Floki.attribute(&amp;quot;head &amp;gt; meta[http-equiv=content-type]&amp;quot;, &amp;quot;content&amp;quot;)
    |&amp;gt; List.first
    |&amp;gt; to_string
  end

  # Caveat: not really case-sensitive check for the DOM node.
  # Floki doesn&amp;#39;t seem to understand `$=foo i` queries. We can&amp;#39;t
  # `String.downcase` here as that will mess up the filter chain.
  defp remove_meta_http_equiv_encoding(html) do
    Floki.filter_out(html, &amp;quot;head &amp;gt; meta[http-equiv*=ontent-]&amp;quot;)
    |&amp;gt; Floki.raw_html
  end
end
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/carpodaster/2809ebdda26d016860b438e70bc842f2.js&quot;&gt; &lt;/script&gt;

</description>
				<pubDate>Thu, 09 Feb 2017 00:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2017/02/09/converting-a-latin1-html-document-with-elixir-part-1/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2017/02/09/converting-a-latin1-html-document-with-elixir-part-1/</guid>
			</item>
		
			<item>
				<title>Upgrading from a PostgreSQL version Homebrew already abandoned</title>
				<description>&lt;p&gt;When my PostgreSQL installation didn’t come up after &lt;a href=&quot;https://www.youtube.com/watch?v=EKtPWGvmAXw&quot; title=&quot;I tried turning it on off and on again&quot;&gt;an unexpected reboot&lt;/a&gt;
and showed errors about a missing &lt;code class=&quot;highlighter-rouge&quot;&gt;libreadline.dylib&lt;/code&gt; (a familiar message after
upgrading to macOS Sierra), I figured I could remedy it with a simple &lt;code class=&quot;highlighter-rouge&quot;&gt;brew
reinstall postgresql&lt;/code&gt;. Sadly, the PostgreSQL version Homebrew reinstalled was not
the one that was already installed, but the most recent version it knew of.&lt;/p&gt;

&lt;p&gt;I may have cranked  &lt;code class=&quot;highlighter-rouge&quot;&gt;brew cleanup postgresql&lt;/code&gt; a tad bit too early 😱 and so I ended up
with my 9.3 installation files already gone and only v9.6.1 available. Sadly, the
old binaries are needed to access the old data format.&lt;/p&gt;

&lt;p&gt;The earliest PostgreSQL version Homebrew still had in stock was 9.4. I checked
&lt;a href=&quot;https://www.postgresql.org/download/macosx/&quot;&gt;postgresql.org&lt;/a&gt; to see whether
there were old source or binary distribution tarballs available. Indeed, it
had a link pointing advanced users to a &lt;a href=&quot;https://www.enterprisedb.com/download-postgresql-binaries&quot;&gt;list of zip files containing binaries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With all tools prepared (&lt;a href=&quot;https://gist.github.com/chbrown/647a54dc3e1c2e8c7395&quot;&gt;and some cross-referencing&lt;/a&gt;) I could repair
my broken installation (assuming the new pgsql is already installed):&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Move the old data files out of the way&lt;/span&gt;
mv /usr/local/var/postgres /usr/local/var/postgres93

&lt;span class=&quot;c&quot;&gt;# Since my computer previously crashed, I had a stale pid file&lt;/span&gt;
rm /usr/local/var/postgres93/postmaster.pid

&lt;span class=&quot;c&quot;&gt;# Create a new data dir for the most recent pgsql version&lt;/span&gt;
initdb --pgdata&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/var/postgres

&lt;span class=&quot;c&quot;&gt;# Migrate data files, pointing old-bindir to the location of&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# the extracted zip file&lt;/span&gt;
pg_upgrade &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --old-datadir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/var/postgres93 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --new-datadir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/var/postgres &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --old-bindir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/Downloads/pgsql/bin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --new-bindir&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/Cellar/postgresql/9.6.1/bin &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --verbose

&lt;span class=&quot;c&quot;&gt;# Start PostgreSQL again&lt;/span&gt;
brew services start postgresql

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Everthing should be up and running again.&lt;/p&gt;

</description>
				<pubDate>Mon, 16 Jan 2017 00:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2017/01/16/upgrading-old-postgresql-with-homebrew/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2017/01/16/upgrading-old-postgresql-with-homebrew/</guid>
			</item>
		
			<item>
				<title>Dream of BEMifornication – or how we refactored our scss with linting</title>
				<description>&lt;p&gt;Writing a lot of code over the years also means to deal with refactoring at some point. Your skills improve over time and technologies evolve. Coming back to an old project often makes it hard to understand what the heck Younger You was thinking when writing and structuring this code.&lt;/p&gt;

&lt;p&gt;For example when I started learning SASS, I felt in love with nesting everything. Back then I tought nesting elements would be the best way to avoid css conflicts … I figured out that might just be true up to a certain level of nesting. When &lt;a href=&quot;http://getbem.com/&quot;&gt;BEM&lt;/a&gt; came around, we started sticking to its convention, leaving previously written css code mostly untouched. Things started to get messy in our frontend codebase.&lt;/p&gt;

&lt;p&gt;Lately my fellow co-worker Alex began to refactor our oldest project and we started talking about &lt;a href=&quot;https://github.com/brigade/scss-lint/&quot;&gt;scss-lint&lt;/a&gt;. I was already using &lt;a href=&quot;http://jslint.com/&quot;&gt;jslint&lt;/a&gt; in my editor but never really thought about linting my scss as well. We sat together and before long, we agreed that it is about time to start using it.&lt;/p&gt;

&lt;h2 id=&quot;so-what-is-scsslint&quot;&gt;So what is scsslint?&lt;/h2&gt;

&lt;p&gt;Scss-lint is a tool to analyse your scss code for potential errors and to make sure the code conventions are respected.&lt;/p&gt;

&lt;p&gt;In order to use &lt;a href=&quot;https://github.com/brigade/scss-lint&quot;&gt;scss_lint&lt;/a&gt; in your rails application you need to include it into your &lt;code class=&quot;highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Gemfile&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;scss_lint&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;require: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Afterwards you can configure the linting rules by adding &lt;code class=&quot;highlighter-rouge&quot;&gt;.scss_lint.yml&lt;/code&gt; to your applications root directory. You can find a list of all supported linting options &lt;a href=&quot;https://github.com/brigade/scss-lint/blob/master/lib/scss_lint/linter/README.md&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yml&quot; data-lang=&quot;yml&quot;&gt;&lt;span class=&quot;s&quot;&gt;scss_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app/assets/stylesheets/**/*.css.scss&#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;exclude&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;app/assets/stylesheets/vendor/**&#39;&lt;/span&gt;

&lt;span class=&quot;s&quot;&gt;linters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;BorderZero&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;Indentation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;warning&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2&lt;/span&gt;

  &lt;span class=&quot;s&quot;&gt;SelectorFormat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;convention&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hyphenated_BEM&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-linter-walks-into-a-project&quot;&gt;A linter walks into a project&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://3.bp.blogspot.com/-mB2Cx3d05u4/UOoAHp1BU0I/AAAAAAAAFBc/SWdJcAmH7Vk/w1200-h630-p-nu/troy-barnes.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Running &lt;code class=&quot;highlighter-rouge&quot;&gt;$ scss-lint&lt;/code&gt; in your terminal, will give you a good overview which files to tackle. If you want to see different information, for example the files which have no warnings, it is worth to checkout the &lt;a href=&quot;https://github.com/brigade/scss-lint#formatters&quot;&gt;formaters&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To use linting within your editor you need to install a &lt;a href=&quot;https://github.com/brigade/scss-lint#editor-integration&quot;&gt;plugin&lt;/a&gt;. I would suggest mapping linting to a key instead of automaticaly linting when opening or saving a file. If you still want to enable “autolinting”, keep in mind that it will slow down your text editor’s speed.&lt;/p&gt;

&lt;h2 id=&quot;jumping-into-the-mud&quot;&gt;Jumping into the mud&lt;/h2&gt;

&lt;p&gt;I highly recommend &lt;strong&gt;automating most of the linting&lt;/strong&gt; tasks: it saves a lot of time that we can spend focussing on bemifaction.&lt;/p&gt;

&lt;p&gt;Introducing &lt;a href=&quot;http://csscomb.com/&quot;&gt;CSScomb&lt;/a&gt;. This is a fantastic tool for automatic linting. It formats your code very efficiently and it’s easy to customize. You can create your configuration by using the config generator on the project’s website
or download some configs &lt;a href=&quot;https://github.com/csscomb/csscomb.js/tree/dev/config&quot;&gt;here&lt;/a&gt;.
We used &lt;code class=&quot;highlighter-rouge&quot;&gt;csscomb.json&lt;/code&gt; and tweaked the sort-order to match &lt;a href=&quot;https://github.com/brandon-rhodes/Concentric-CSS&quot;&gt;Concentric-CSS order&lt;/a&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/e73bed248df2d3af1e489c74d8bbe9be.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;I installed &lt;a href=&quot;https://github.com/csscomb/vim-csscomb&quot;&gt;vim-csscomb&lt;/a&gt; to use csscomb within my editor but there are plugins for all major editors arround.&lt;/p&gt;

&lt;p&gt;Let’s start digging!&lt;/p&gt;

&lt;p&gt;Alex came up with a simple structure for our scss files:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;BLOCK&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#fff&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;MODIFIER&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example--red&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#ff0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;ELEMENT&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.example__title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1.5rem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Dividing our modules in BEM-blocks ensures the usage of only one block element per file.
Bemify your classes, refactor your views, run CSScomb.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.duckduckgo.com/iu/?u=http%3A%2F%2Fmedia.riffsy.com%2Fimages%2F3ccc0e15cbf9bee22c30701649065643%2Ftenor.gif&amp;amp;f=1&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Voilà.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;It can be a long road and in the beginning it seems like a hole with no bottom. But seeing the warning and error messages disappear can be very rewarding. Is it fun? No. Do you end up with cleaner code, better maintainablity and less conflicts in your stylesheets? Yes.&lt;/p&gt;
</description>
				<pubDate>Fri, 07 Oct 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/10/07/dream-of-bemifornication/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/10/07/dream-of-bemifornication/</guid>
			</item>
		
			<item>
				<title>Call by what? An adventure story about evaluation strategies</title>
				<description>&lt;h3 id=&quot;evaluation-of-methods&quot;&gt;Evaluation of methods&lt;/h3&gt;

&lt;p&gt;When I learned C++ at university some time ago, the concept of references and pointers
fascinated and confused me simultaneously. But for some reason I liked tinkering with it.&lt;/p&gt;

&lt;p&gt;I was remembered to that time when I was recently confronted with so-called &lt;em&gt;evaluation strategies&lt;/em&gt;
in a completely different context. Talking about programming languages, an &lt;em&gt;evaluation strategy&lt;/em&gt; is a 
description on what happens to the arguments that have been passed to a function when the function 
is executed.&lt;/p&gt;

&lt;p&gt;When it comes to evaluation strategies, C++ has a pretty clear and simple answer to a theorist’s questions: 
The programmer can explictly control if a function/method should use the 
strategy &lt;em&gt;call-by-value&lt;/em&gt; or &lt;em&gt;call-by-reference&lt;/em&gt; for method evaluation. 
This is possible because in C++ there is an explicit seperation between
values (content of memory blocks) and references/pointers to them.&lt;/p&gt;

&lt;h4 id=&quot;what-does-call-by-value-and-call-by-reference-mean&quot;&gt;What does call-by-value and call-by-reference mean?&lt;/h4&gt;

&lt;p&gt;&lt;em&gt;Call by value&lt;/em&gt; and &lt;em&gt;call-by-reference&lt;/em&gt; are probably the most popular evaluation strategies
used in major programming languages today.&lt;/p&gt;

&lt;p&gt;Losely spoken, &lt;em&gt;call-by-value&lt;/em&gt; means that the argument that has been passed into
a function gets copied before it is used during execution. The original expression 
is not modified or touched and the function body gets its own copy to play with.&lt;/p&gt;

&lt;p&gt;Let’s assume we own a picture of monkey. And now we meet a pirate, that loves drawing. 
The pirate wants to draw a banana onto our picture. If the pirate likes &lt;em&gt;call-by-value&lt;/em&gt;, 
he’ll copy the picture first, draw a banana onto his copy and hands back the copy with the banana.&lt;/p&gt;

&lt;p&gt;On the other hand, &lt;em&gt;call-by-reference&lt;/em&gt; means that the expression that is passed to
the function is not copied. It is directly used in the function body. That means, 
the pirate would directly draw his banana onto the monkey picture that we own. 
Our original picture has been modified.&lt;/p&gt;

&lt;h4 id=&quot;eh-can-you-convert-these-thoughts-to-some-concrete-code-please&quot;&gt;Eh, can you convert these thoughts to some concrete code, please?&lt;/h4&gt;

&lt;p&gt;let’s assume we have written a C++ snippet as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawBananaOntoACopyOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey with a banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drawBananaOntoACopyOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function &lt;em&gt;drawBananaOntoACopyOf&lt;/em&gt; will take an instance
of an data structure called &lt;code class=&quot;highlighter-rouge&quot;&gt;Picture&lt;/code&gt;. When we would have written it this
way, the value &lt;em&gt;p&lt;/em&gt; will be &lt;em&gt;copied&lt;/em&gt; to the function’s
body data available during execution, when &lt;em&gt;drawBananaOntoACopy&lt;/em&gt; is invoked. Running
the program will cause the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;A monkey
A monkey&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we would conversly write&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;iostream&amp;gt;
#include &amp;lt;string&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;drawBananaDirectlyOnto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey with a banana&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Picture&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;A monkey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;drawBananaDirectlyOnto&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;then, when &lt;em&gt;drawBananaDirectlyOnto&lt;/em&gt; is invoked, &lt;em&gt;p&lt;/em&gt; will be a &lt;em&gt;reference&lt;/em&gt; to an existing picture structure
somewhere in the memory. The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&lt;/code&gt;-sign indicates this to the compiler, it’s a syntactic method
of C++ to control the evaluation strategy (&lt;em&gt;call-by-reference&lt;/em&gt; in the latter case).&lt;/p&gt;

&lt;p&gt;The output would be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;A monkey
A monkey with a banana&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;hm-ok-seems-pretty-clear-wheres-the-joke&quot;&gt;Hm. Ok. Seems pretty clear. Where’s the joke?&lt;/h3&gt;

&lt;p&gt;The situation is a bit more interesting for other programming languages, like
Ruby. Eager readers can short circuit this reading &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;and head over to a very enlightening discussion
on stackoverflow&lt;/a&gt;, 
but I’d like to recap the discussion and the final result in my own words.&lt;/p&gt;

&lt;p&gt;First, unlike C++, Ruby has no built-in seperation between values and references. Everything
we save to variables in Ruby is a &lt;em&gt;reference&lt;/em&gt; to an object. We only have access to the things 
in the memory via these references.&lt;/p&gt;

&lt;p&gt;But what happens if we pass these variables (holding references) into Ruby methods? What kind
of evaluation strategy does Ruby use? Let’s examine.&lt;/p&gt;

&lt;h4 id=&quot;meanwhile-in-the-laboratory&quot;&gt;Meanwhile in the laboratory&lt;/h4&gt;

&lt;p&gt;Consider the following Ruby code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;dabble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;When dabbling, I dabble with the object_id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# I am an important line. Why?&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Richard Feynman&#39;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;The input human is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;It has the object_id &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;object_id&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Let&#39;s dabble!&quot;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;dabble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;After dabbling the scientist is named &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Running this snippet results in the following output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;The input human is Richard Feynman
It has the object_id 70159717619940
Let&lt;span class=&quot;s1&quot;&gt;&#39;s dabble!
When dabbling, I dabble with the object_id 70159717619940
After dabbling the scientist is named Richard Feynman&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At the first hand, this may intuitively feel like Ruby is using &lt;em&gt;call-by-reference&lt;/em&gt;, since
the &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; inside the function body is the same as before, so it looks like
there has no “copying” being performed. What we put in, is obviously &lt;em&gt;a reference&lt;/em&gt; similar
to the references in the C++-examples.&lt;/p&gt;

&lt;h4 id=&quot;analysis&quot;&gt;Analysis&lt;/h4&gt;

&lt;p&gt;But this only true at the surface. Let’s remember the fact mentioned above: Ruby has no
&lt;em&gt;values&lt;/em&gt; in the sense of C++, Ruby &lt;em&gt;only&lt;/em&gt; has (object) references. 
The only way of modifying a reference is &lt;em&gt;assignment&lt;/em&gt;. Assignments either change existing references or 
create new ones. Keeping that in mind, concentrate on this line in the Ruby code example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s assume that Ruby would have used &lt;em&gt;call-by-reference&lt;/em&gt;. Then, according to our “definition” above, 
the argument &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt;, which is a reference, that has been passed to the method &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;,
has not been copied. It has directly been passed to the method body.&lt;/p&gt;

&lt;p&gt;If so, the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; within the method body would have modified 
the (original) reference that has been created before method invocation. The expression
&lt;code class=&quot;highlighter-rouge&quot;&gt;human.reverse&lt;/code&gt; would have created a new string (the reversed) with a new &lt;code class=&quot;highlighter-rouge&quot;&gt;object_id&lt;/code&gt; and
the existing reference &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt; would now point to the new object, the reversed string, because
it has been assigned.&lt;/p&gt;

&lt;p&gt;But, as proven by the output, this is not the case. The original reference points to the same 
thing and has not been changed. If Ruby would use &lt;em&gt;call-by-reference&lt;/em&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;human&lt;/code&gt; would point to the
reversed string in a new memory block afterwards - but it doesn’t.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;stackoverflow discussion&lt;/a&gt;
I already mentioned are great explanation pictures - I’d like to pick up some thoughts of the answers here:&lt;/p&gt;

&lt;p&gt;Check the variable situation when the method body of &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt; starts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var_human_outside_the_method -------→  &lt;span class=&quot;s2&quot;&gt;&quot;Richard Feynman&quot;&lt;/span&gt;
                                               ↑ 
var_human_inside_the_method  -------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When running the first line of &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;, there are &lt;em&gt;two&lt;/em&gt; references 
to the string “Richard Feynman”. One original and the copy held by &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;.
I intentionally chose them both to have the same name, which may is confusing.&lt;/p&gt;

&lt;p&gt;Then, the assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt; method changes 
the situation as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;var_human_outside_the_method -------→  &lt;span class=&quot;s2&quot;&gt;&quot;Richard Feynman&quot;&lt;/span&gt; 
                                                 
var_human_inside_the_method  ------------------→ &lt;span class=&quot;s2&quot;&gt;&quot;namnyeF drahciR&quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;a-bigger-picture&quot;&gt;A bigger picture&lt;/h4&gt;

&lt;p&gt;As we have seen, one could argue that Ruby uses &lt;em&gt;call-by-value&lt;/em&gt; when applying the “canoncial”
terminology used in computer science strictly. Up to now we only discussed
two specific evaluaton strategies. But I’d like to underline that the world of 
evaluation strategies is &lt;em&gt;not&lt;/em&gt; binary - it’s a bit more colored than only black and white. 
There are some other approaches beside  &lt;em&gt;call-by-value&lt;/em&gt; and &lt;em&gt;call-by-reference&lt;/em&gt; and even the 
latter trategies can be differentiated a bit more.&lt;/p&gt;

&lt;p&gt;The wikipedia article on &lt;a href=&quot;https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing&quot;&gt;evaluation strategies&lt;/a&gt;
calls the variant of Ruby is using &lt;em&gt;call-by-sharing&lt;/em&gt;, which is an interesting point of view, since it is more
suitable for languages that do “wrap” all values, i.e. Ruby with its object references.&lt;/p&gt;

&lt;p&gt;The description found in that article reads as follows:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The semantics of call by sharing differ from call by reference in that assignments 
to function arguments within the function aren’t visible to the caller, (unlike by reference semantics), so e.g. 
if a variable was passed, it is not possible to simulate an assignment on that variable in the caller’s scope&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… and that’s exactly what happened in our Ruby script. The assignment &lt;code class=&quot;highlighter-rouge&quot;&gt;human = human.reverse&lt;/code&gt; was not visible
to the “global” scope outside the method &lt;code class=&quot;highlighter-rouge&quot;&gt;dabble&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;further-related-reading&quot;&gt;Further (related) reading&lt;/h3&gt;

&lt;p&gt;I ran into this discussion with myself while reading some chapters of the book &lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/&quot;&gt;Types and Programming Languages&lt;/a&gt;
by Benjamin C. Pierce. It contains a discussion of &lt;em&gt;evaluation/reduction strategies&lt;/em&gt; of the so-called &lt;a href=&quot;https://www.youtube.com/watch?v=FITJMJjASUs&amp;amp;ab_channel=Confreaks&quot;&gt;&lt;em&gt;λ-calculus&lt;/em&gt;&lt;/a&gt;, which serves as a theoretical
model of computation and can be seen as a great-grandfather of all today’s functional programming languages.&lt;/p&gt;

&lt;p&gt;Playing with these concepts encouraged me recapitulating how non-theoretical languages, 
like C++ or Ruby, accomodate this and how the “practical” evaluation strategies performed by Ruby or C++ 
relate to the original definitions given in the context of formal systems like the λ-calculus.&lt;/p&gt;

&lt;p&gt;If you want to dig deeper, more details of &lt;em&gt;call-by-value&lt;/em&gt; as evaluation/reduction strategy for the λ-calculus can be found 
&lt;a href=&quot;http://homepages.inf.ed.ac.uk/gdp/publications/cbn_cbv_lambda.pdf&quot;&gt;in a paper by Gordon Plotkin&lt;/a&gt; from 1975 as well as, more convenient for non-computer-science-researchers, 
in Chapter 5 of &lt;a href=&quot;http://www.cis.upenn.edu/~bcpierce/tapl/&quot;&gt;TAPL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As mentioned, I found the discussion related to &lt;a href=&quot;http://stackoverflow.com/questions/1872110/is-ruby-pass-by-reference-or-by-value&quot;&gt;this question on stackoverflow&lt;/a&gt;
very educational, so if I left you confused about the topic, there’s a good chance that you’ll find illumination there.&lt;/p&gt;
</description>
				<pubDate>Fri, 15 Jul 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/07/15/call-by-what-an-adventure-story-about-evaluation-strategies/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/07/15/call-by-what-an-adventure-story-about-evaluation-strategies/</guid>
			</item>
		
			<item>
				<title>Loading Controller-specific Assets with Sprockets v3.0</title>
				<description>&lt;p&gt;Going from Rails v4.2.4 to v4.2.6 – a mere &lt;em&gt;patchlevel&lt;/em&gt; update, mind you –
became a Yak-shaving nightmare: Upgrading two other gems that broke with v4.2.6
brought in Sprockets v3.x. And that broke our little logic to include
&lt;strong&gt;controller-specific javascript&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We have separate JS files following a naming convention that should be included
in the layout when they are present. The path is constructed as follows:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the pre-update version, we included the Javascript like this:&lt;/p&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;find_asset&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;find_asset&lt;/code&gt; was gone post-update and none of the discussed solutions in issue
&lt;a href=&quot;https://github.com/rails/sprockets-rails/issues/311&quot;&gt;rails/rails#311&lt;/a&gt; were
working for us. &lt;code class=&quot;highlighter-rouge&quot;&gt;assets_manifest[filename]&lt;/code&gt; was always empty and we didn’t
want to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;asset_path(filename)&lt;/code&gt; without really knowing if the asset exists.&lt;/p&gt;

&lt;p&gt;However, we noticed that &lt;em&gt;existing&lt;/em&gt; assets had the literal &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;/assets/&quot;&lt;/code&gt; in
their path only when found. We used that to determine whether or not to out the
JS include statement:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\/assets\//&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Kinda ugly, yes, but seemed to get the job done. Only it didn’t. Apparently
&lt;code class=&quot;highlighter-rouge&quot;&gt;asset_path&lt;/code&gt; has some additional behind-the-scenes magic that, to add insult to
injury, behaves differently in development than on staging/production of
course: It requires an explicit filename extension to locate the asset.&lt;/p&gt;

&lt;p&gt;Behold the final version:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;ApplicationHelper&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;controller_specific_js&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;modules/&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-haml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# somewhere in our layout file:
&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asset_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\/assets\//&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;javascript_include_tag&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller_specific_js&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;YMMV, of course, but we hope it helps.&lt;/p&gt;
</description>
				<pubDate>Fri, 20 May 2016 00:00:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/05/20/loading-controller-specific-assets-with-sprockets-3/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/05/20/loading-controller-specific-assets-with-sprockets-3/</guid>
			</item>
		
			<item>
				<title>Adhoc Exports on Heroku's Console</title>
				<description>&lt;p&gt;Ever had that &lt;em&gt;»can you give me a list of … real quick?«&lt;/em&gt; request coming in?
Most of the time, delivering that list only involves firing a simple Arel query
on the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails console&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;Array#join&lt;/code&gt; the record’s relevant attributes with a
mere &lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt; and hand it over as a CSV file.&lt;/p&gt;

&lt;p&gt;The annoying part is capturing the output: For a large resultset, it can very
well exceed your terminal’s output buffer size. Even if it does fits,
copy/pasting everything with your mouse is tedious at best.&lt;/p&gt;

&lt;p&gt;Writing to a CSV file on Heroku’s Rails console requires uploading it
somewhere, S3 in our case, meaning you’ll have to deal with authentication keys
and APIs that I don’t know by heart. Also not my idea of quickly running a
simple export.&lt;/p&gt;

&lt;p&gt;Creating a rake task that handles everything is certainly the proper way to go,
but it means doing a &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;, waiting for the stuff to deploy and potentially
&lt;code class=&quot;highlighter-rouge&quot;&gt;git revert&lt;/code&gt; the exporter again if it’s just throw-away code.&lt;/p&gt;

&lt;p&gt;I want to stick with a simple Ruby one-liner and this is how I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;rails
runner&lt;/code&gt; command, invoked through the Heroku console, together with output
redirection to create my CSV file freshly from production data:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku run rails runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;puts MyModel.where(foo: &#39;bar&#39;).pluck(:id, :email).map { |data| data.join(&#39;;&#39;) }&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -r production &amp;gt; my_adhoc_export.csv
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you want to see what’s going on while your export does its thing, use &lt;code class=&quot;highlighter-rouge&quot;&gt;tee(1)&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;heroku run rails runner &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;puts &#39;They are going to take me away haha!&#39;&quot;&lt;/span&gt;
  -r production |tee funny_farm.txt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, a bit of an advise: running code on your production system is not a Good Idea™.
If you have to run anything more complex than a simple query-command, wrap it into
a rake task (or some such). The above example is meant for one-off tasks that output
stuff to my local terminal. You have been warned :)&lt;/p&gt;
</description>
				<pubDate>Tue, 29 Mar 2016 11:54:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2016/03/29/adhoc-data-dumps-and-exports-on-heroku/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/03/29/adhoc-data-dumps-and-exports-on-heroku/</guid>
			</item>
		
			<item>
				<title>Including a Module. With Parameters!</title>
				<description>&lt;p&gt;The Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; statement only allows for one type of argument: the module
constant(s) to include. Oftentimes I wish it would be possible to pass
arguments that the included module receives as optional parameters to its
&lt;code class=&quot;highlighter-rouge&quot;&gt;included&lt;/code&gt; callback like so:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Note: This would be nice … but this code doesn&#39;t compile&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;here_be_more_args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Have access to the additional args passed&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# in the include statement below&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:param1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:param2&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;http://ruby-doc.org/core-2.3.0/Module.html#method-i-included&quot;&gt;Module#included&lt;/a&gt;
is the method that gets called when the module is included somewhere. Unlike in
my would-be-nice example, it only receives one argument: the constant of the
including class.&lt;/p&gt;

&lt;p&gt;Additional arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; are expected to be modules, allowing you to
include more than one module on one line.&lt;/p&gt;

&lt;p&gt;A way to parameterize the behaviour of included modules is to add a &lt;strong&gt;singleton&lt;/strong&gt;
method in the included class and then have that class method accept parameters to
do whatever (e.g. set class-wide variables or dynamically define methods).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;included&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;define_singleton_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:define_greeter&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# A dynamically defined method that dynamically defines another&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# method. What a crazy world!&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass1&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_greeter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:morning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good morning, sir/madam&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass2&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyMixin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;define_greeter&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:afternoon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good afternoon! Would you like some tea?&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyClass1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;morning&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good morning, sir/madam!&#39;&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;MyClass2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;afternoon&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good afternoon! Would you like some tea?&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is obviously a contrived example, but what I dislike about it is the two
lines of meta programming that serve the same purpose: dynamically adding
something to the including class. Also, the &lt;code class=&quot;highlighter-rouge&quot;&gt;define_greeter&lt;/code&gt; class method is
probably not needed anywhere else in the class and this is against my sense of
aesthetics.&lt;/p&gt;

&lt;p&gt;Now, how about &lt;strong&gt;dynamically creating a module&lt;/strong&gt; and then including that one?
Like … a module factory? How do we even start? It’s actually quite easy: the
&lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; statement only accepts arguments of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;. So all we have to
make sure that whatever we pass to &lt;code class=&quot;highlighter-rouge&quot;&gt;include&lt;/code&gt; returns a proper Ruby &lt;code class=&quot;highlighter-rouge&quot;&gt;Module&lt;/code&gt;.
I give you this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ModuleFactory&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Yes, it&#39;s a class&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# overriding the constructor&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;greeter_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;greeter_output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Important: We don&#39;t return an instance of ModuleFactory here. The&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# (implicit) return value is the anonymous module.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClass&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ModuleFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:evening&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Good evening!&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;MyClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;evening&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# =&amp;gt; &#39;Good evening!&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Voila! &lt;code class=&quot;highlighter-rouge&quot;&gt;ModuleFactory.new(…)&lt;/code&gt; returns a module which can be included, thus
combining the include statement with the dynamic meta-programming. The provided
examples are all a bit abstract but I will provide a more concrete (Rails 5!)
example in a follow-up post.&lt;/p&gt;
</description>
				<pubDate>Fri, 11 Mar 2016 16:34:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2016/03/11/include-a-module-with-parameters/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2016/03/11/include-a-module-with-parameters/</guid>
			</item>
		
	</channel>
</rss>
