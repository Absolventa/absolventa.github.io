<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Devnull</title>
		<description>The blog of the ABSOLVENTA Dev Team</description>
		<link>http://devnull.absolventa.de</link>
		<atom:link href="http://devnull.absolventa.de/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Handle REXML::ParseExceptions with 'Schneiderlein'</title>
				<description>&lt;p&gt;In order to keep our XML API compliant with RESTful constraints, we observed
dissonant behavior regarding the correct use of the HTTP protocol semantics:
Whenever a customer accidentally sends malformed XML attached to a formally
valid (w.r.t to header data and authorization) request, it will be responded
with HTTP status code 500 by the request catching Rails application.&lt;/p&gt;

&lt;p&gt;From the perspective of API design this is not best practice for several
reasons: First of all, the customer does not get any information about what
went wrong and what to do next, so that’s somehow the opposite of a solid
hypermedia approach.&lt;/p&gt;

&lt;p&gt;Second, it’s not correct behavior to reflect the &lt;em&gt;global&lt;/em&gt; situation. Formally
the HTTP status code is correct, since the regular application cyclce is broken
on the server side. But initially it was caused by problems contained in the
post data - and it needs to be fixed on the client side. Consequently it would
be way better to handle these errors more confidently and respond with a 4xx
type status code. In particular, customer input should not be able to break the
server in general.&lt;/p&gt;

&lt;p&gt;To come over it, we started a pair session to learn more about the internals of
&lt;a href=&quot;https://github.com/rails/actionpack-xml_parser&quot;&gt;&lt;code&gt;ActionDispatch::XmlParamsParser&lt;/code&gt;&lt;/a&gt;,
which is the one we use for parsing the submitted XML data. The bottleneck for
our problem is the invocation of &lt;code&gt;Hash.from_xml&lt;/code&gt;, L10 below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# Note that this is just a snippet, original definition:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# rails/actionpack-xml_parser/master/lib/action_dispatch/xml_params_parser.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_formatted_parameters&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mime_type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Mime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;XML&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Rails 4.1 moved #deep_munge out of the request and into ActionDispatch::Request::Utils&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;munger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;defined?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Utils&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;munger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deep_munge&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from_xml&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{})&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rewind&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:rewind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;with_indifferent_access&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Passing in a string containing problematic XML as argument to &lt;code&gt;Hash.from_xml&lt;/code&gt;, e.g. missing closing tags, will raise a &lt;code&gt;REXML::ParseException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a nice
&lt;a href=&quot;http://robots.thoughtbot.com/catching-json-parse-errors-with-custom-middleware&quot;&gt;blog post by thoughtbot&lt;/a&gt; that
highly inspired our variant of solving the problem: A custom Rack middleware that is invoked before &lt;code&gt;ActionDispatch::XmlParamsParser&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In contrast to the solution presented in blog post mentioned we don’t want to respond directly on middleware layer. Instead we save
the excetion information in an additional environment variable, which we can be read on the controller layer afterwards
to a proper response:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FlyCatcher&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ParamsParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ParseError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.schneiderlein.parse_errors&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove_errors_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove_errors_from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.input&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.errors&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;StringIO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;RAW_POST_DATA&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;CONTENT_LENGTH&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that the middleware needs to be invoked before params parsing, e.g.:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_before&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ActionDispatch::ParamsParser&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;FlyCatcher&amp;#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Putting these ingredients together was the birth of our gem &lt;a href=&quot;https://github.com/Absolventa/schneiderlein&quot;&gt;Schneiderlein&lt;/a&gt;. Inspired
by the fairytale »Das Tapfere Schneiderlein« (»The Valiant Little Tailor«) by the Grimm Brothers, our little tailor catches tiny errors. Since the gem structure
is engine-like the custom middleware is integrated automatically by loading the gem. Occurring parse errors can be handled
in the responsible controller then:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before_action&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:handle_parse_errors&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;respond_to&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:xml&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;protected&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handle_parse_errors&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;schneiderlein&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Schneiderlein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;respond_with&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schneiderlein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;422&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;schneiderlein&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				<pubDate>Tue, 25 Nov 2014 12:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/11/25/handle-rexml-parse-exceptions-with-schneiderlein/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/11/25/handle-rexml-parse-exceptions-with-schneiderlein/</guid>
			</item>
		
			<item>
				<title>Insert Rack Middleware during Tests</title>
				<description>&lt;p&gt;We recently deployed a wee internal Rails Engine that logs raw API data
in order to save the original payload that was pushed over the wire. That
little piece of software, however, had a bug (which is &lt;em&gt;pretty&lt;/em&gt; uncommon for
software, right?): The logged payload was always empty.&lt;/p&gt;

&lt;p&gt;The Engine’s host application uses Rails’ &lt;code&gt;ActionDispatch::XmlParamsParser&lt;/code&gt;
middleware. It would seem that it messed up the contents of &lt;code&gt;rack.input&lt;/code&gt;
which in turn holds the POST data.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;rack.input&lt;/code&gt; is an IO-like object and it needs to be rewound after
it has been read from. XmlParamsParser reads from it, but apparently doesn’t
rewind it. It seams easy enough to fix, but how to testdrive it?&lt;/p&gt;

&lt;p&gt;I didn’t want to statically include a rack.input-modifying middleware into the
Engine’s dummy app. Instead I wanted add another context that tested against a
version of the dummy infected with a mock middleware and have all other tests
run without it.&lt;/p&gt;

&lt;p&gt;Here’s how I did it. Enjoy!&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# spec/requests/rack_input_modifiable_spec.rb&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Tracks data with rack.input modifying middleware in place&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Need to bind this to a constant in order to hook it in later.&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# It does nothing except putting the IO read marker to the end.&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;ReadsFromRackInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;rack.input&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# moves to EOF&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Dummy::Application is already loaded at this stage. We can&amp;#39;t modify&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the middleware stack as it&amp;#39;s frozen, so subclass it and infect:&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app_with_middleware&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@app_with_middleware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_after&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ParamsParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReadsFromRackInput&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# `app´ is what RSpec tests against in request specs. Think `controller´&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# for controller specs. Overwrite it with our infected app.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app_with_middleware&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# Tweaks to get the subclassed app to get all of its parent&amp;#39;s behaviour.&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:routes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dummy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;routes&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;it_behaves_like&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;tracks raw data&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# i.e. the actual tests&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				<pubDate>Fri, 24 Oct 2014 16:23:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2014/10/24/dynamically-insert-rack-middleware-during-test/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/10/24/dynamically-insert-rack-middleware-during-test/</guid>
			</item>
		
			<item>
				<title>Back to Marshal'ed Cookie-Serialization</title>
				<description>&lt;p&gt;Upgrading to Rails v4.1, it felt like a good idea to switch to the new default
serialization format: JSON. Upgrading from the Marshal’ed serialization to JSON
was as simple as setting Rails’ cookies serializer to &lt;code&gt;:hybrid&lt;/code&gt;. Easy enough and
»better go with the new Rails default«, I thought.&lt;/p&gt;

&lt;p&gt;We were warned about the implications.
&lt;a href=&quot;http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-4-0-to-rails-4-1&quot;&gt;The Rails Upgrade Guide&lt;/a&gt;
states:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When using the :json or :hybrid serializer, you should beware that not all Ruby
objects can be serialized as JSON. For example, Date and Time objects will be
serialized as strings, and Hashes will have their keys stringified.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Only we had to realize the hard way that an external library was dumping high
level objects into the (cookie-based) session that couldn’t easily and
transparently be deserialized again.&lt;/p&gt;

&lt;p&gt;Unfortunately, there is no real rollback option: Setting the serializer back to
&lt;code&gt;:marshal&lt;/code&gt; will get you parser errors when &lt;code&gt;Marshal.load&lt;/code&gt; is fed with JSON
data.&lt;/p&gt;

&lt;p&gt;Since our application started generating JSON-serialized session data after our
change was rolled out, I came up with the following »rolling rollback« strategy:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# app/controllers/application_controller.rb&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;TypeError&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;starts_with?&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;incompatible marshal file format&amp;#39;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;store&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session_store&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionDispatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;reset_session&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A simple &lt;code&gt;reset_session&lt;/code&gt; won’t do as that already tries to access the (invalid)
session object. The rescue hook will regenerate a new Marshal-serialized session
for all those who have already received JSON data, but will of course terminate
their existing sessions (login data, shopping cart … you name it).&lt;/p&gt;

</description>
				<pubDate>Sat, 30 Aug 2014 12:58:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2014/08/30/migrating-back-to-marshal-ed-cookie-serialization-in-rails-4-1/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/08/30/migrating-back-to-marshal-ed-cookie-serialization-in-rails-4-1/</guid>
			</item>
		
			<item>
				<title>Ruby on Waves: Πάντα ῥεῖ</title>
				<description>&lt;blockquote&gt;
Everything flows&lt;br /&gt;
&lt;small&gt;&amp;mdash; Heraclitus&lt;/small&gt;
&lt;/blockquote&gt;

&lt;p /&gt;

&lt;p&gt;We’ve been busying ourselves with the final touches on our
&lt;a href=&quot;https://www.absolventa.de/karriereguide/tipps/das-neue-absolventa&quot; lang=&quot;de&quot; title=&quot;The New ABSOLVENTA (German)&quot;&gt;Grand ABSOLVENTA Relaunch&lt;/a&gt;
recently. It’s been done in the record time of only seven months and we dare say: we’re quite proud of it.&lt;/p&gt;

&lt;p&gt;While a full visual overhaul was certainly due, the initial spark for a
relaunch came from a backend perspective: ABSOLVENTA’s Rails codebase
dates back to 2007 and as with every bigger piece of software, it has its
Dark Corners™. It has unquestionably accumulated a nice heap of &lt;a href=&quot;https://en.wikipedia.org/wiki/Technical_debt&quot;&gt;technical debt&lt;/a&gt; over the years.&lt;/p&gt;

&lt;p&gt;After the initial planning phase, we kicked it off in December 2013 with a few
but significant changes and additions to our tooling: we finally moved to
Github completely (that alone felt awesome!) and added Travis CI +
&lt;a href=&quot;https://codeclimate.com/&quot;&gt;Code Climate&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The latter was a key element to achieve what we set out for: finding our weak
spots. We wanted to dissect them one by one, streamline the processes involved
and then piece them together again like you would with a set of Lego©
bricks. Or simply delete them … which we did &lt;em&gt;a lot&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At last, we launched in the evening of July 14th, everyone still high on emotion
after Germany’s winning the Worldcup the night before. Naturally and following an old ritual, the occasion was celebrated with a round of home made White Russians:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/relaunch-2014-white-russian.jpg&quot; alt=&quot;git push production&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Everything went smoothly and so our faint anxiety and residual doubts that going on a team event with &lt;em&gt;the entire development team&lt;/em&gt; only three days after a &lt;strong&gt;major&lt;/strong&gt; relaunch might not be the brightest idea quickly vanished in a puff of smoke.&lt;/p&gt;

&lt;p&gt;We had a great time spending a whole day on the river Spree on the outskirts of Berlin and in hindsight, this was a true conclusion of a goal that has driven us for the first half of the year but only marks another start: improving our codebase will of course continue. Fighting technical debt is a perpetual thing. Panta rei – everything flows. Like we did on the river. OMG a pun!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/team-paddeln-2014-boat1.jpg&quot; alt=&quot;Markus, Daniel and Franzi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/team-paddeln-2014-boat0.jpg&quot; alt=&quot;Robin, Alex, Nina and Carsten&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 06 Aug 2014 13:23:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2014/08/06/ruby-on-waves/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/08/06/ruby-on-waves/</guid>
			</item>
		
			<item>
				<title>Bulk-Truncate Your Rails Apps' test.logs</title>
				<description>&lt;p&gt;Every test run for your Rails application generates a ton of log output in &lt;code&gt;log/test.log&lt;/code&gt; and it can
grow quite big over time. If you’re only sporting an SSD, diskspace is precious and you may want
to truncate your test.log again. Here’s how you do it for all your locally checked-out Rails apps:&lt;/p&gt;

&lt;p&gt;Assuming you have your Rails apps in a directory called, say, &lt;code&gt;rails-projects&lt;/code&gt;, cd into that directory.
&lt;code&gt;du -hc */**/test.log&lt;/code&gt; shows you how much diskspace your test logfiles are eating.&lt;/p&gt;

&lt;p&gt;You can truncate them with &lt;code&gt;find . -name test.log -exec cp -v /dev/null {} \;&lt;/code&gt;. If you’re on a Linux system,
using &lt;code&gt;truncate&lt;/code&gt; should also work, but copying &lt;code&gt;/dev/null&lt;/code&gt; works everywhere.&lt;/p&gt;

&lt;p&gt;There is also &lt;code&gt;rake log:clear&lt;/code&gt; which has the nice »side-effect« of clearing &lt;em&gt;all&lt;/em&gt; your *.log files,
but takes longer to invoke as it will load your Rails environment first.&lt;/p&gt;

&lt;p&gt;Your development.log-files probably won’t grow as fast, but you can of course put them on a diet
in the same fashion.&lt;/p&gt;
</description>
				<pubDate>Thu, 22 May 2014 14:42:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2014/05/22/mass-truncate-your-rails-test-log-files/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/05/22/mass-truncate-your-rails-test-log-files/</guid>
			</item>
		
			<item>
				<title>Vim Berlin Usergroup @ ABSOLVENTA</title>
				<description>&lt;p&gt;Robin, Markus and I are all avid &lt;a href=&quot;http://vim.org&quot;&gt;Vim&lt;/a&gt; users. We invited Berlin’s user group over
to hold their first meeting in 2014 in our kitchen slash leisure zone. It wasn’t overly crowded,
but as pointed out by &lt;a href=&quot;//tasche.me&quot;&gt;Bodo&lt;/a&gt;, canceling it wasn’t an option: the Emacs user group
Berlin had a meeting on the same day and we would have been laughed at.&lt;/p&gt;

&lt;p&gt;Although there were no prepared talks, we had a good time: We talked about the progress being made
on &lt;a href=&quot;//neovim.org&quot;&gt;Neovim&lt;/a&gt;, discussed a highly customised and plugin-rich &lt;code&gt;.vimrc&lt;/code&gt; vs. vanilla Vim
and had a look at Christian’s vim config.&lt;/p&gt;

&lt;p&gt;A nice and cosy evening that, yet again, got everyone a few more plugins to try out.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/vimberlin-2013-2.jpg&quot; alt=&quot;Vim Usergroup @ ABSOLVENTA&quot; /&gt;&lt;/p&gt;
</description>
				<pubDate>Fri, 04 Apr 2014 17:56:00 +0200</pubDate>
				<link>http://devnull.absolventa.de/2014/04/04/vim-berlin-usergroup-absolventa/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/04/04/vim-berlin-usergroup-absolventa/</guid>
			</item>
		
			<item>
				<title>JSDoc and the Revealing Module Pattern</title>
				<description>&lt;p&gt;Before the grand &lt;a href=&quot;http://en.wikipedia.org/wiki/Beta_version#Beta&quot;&gt;v1.0.0&lt;/a&gt; of an internal asset pipeline gem  with lots of extracted javascript from our various Rails apps, I wanted to see what our API documentation looked like in colourful HTML.&lt;/p&gt;

&lt;p&gt;Much to my surprise, &lt;a href=&quot;http://usejsdoc.org/&quot;&gt;JSDoc&lt;/a&gt; didn’t show a thing when I
ran it over our .js files: We use the &lt;a href=&quot;http://www.klauskomenda.com/code/javascript-%20programming-patterns/#revealing&quot;&gt;Revealing Module
Pattern&lt;/a&gt;
with self-executing code to define our Javascript and JSDoc had some trouble
parsing it.&lt;/p&gt;

&lt;p&gt;Documentation on how to fix this was scarce - everyone seemed to have a slightly different use case – so here’s what we came up with after some trial and error runs with various JSDoc keywords.&lt;/p&gt;

&lt;p&gt;Our Javascript looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// In file: namespace.js&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// In file: modules/urlify.js&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Urlify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * @param {string} foo&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Magick!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JSDoc wouldn’t recognize &lt;code&gt;Urlify&lt;/code&gt; as part of the &lt;code&gt;Absolventa&lt;/code&gt; namespace, nor would it find
the &lt;code&gt;Absolventa.Urlify.init()&lt;/code&gt; static method.&lt;/p&gt;

&lt;p&gt;Behold the necessary JSDoc tags to tie it all together:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @namespace Absolventa&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @namespace Urlify&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @memberof Absolventa&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @requires {@link Absolventa.Helpers}&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Absolventa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Urlify&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * @function init&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * @memberof! Absolventa.Urlify&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * @param {string} foo&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * @example&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * Absolventa.Urlify.init(&amp;#39;hello world&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;// Magick!&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}());&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Et voilá! All inner functions must be declared with a &lt;code&gt;@memberof!&lt;/code&gt; and a
&lt;code&gt;@function &amp;lt;name&amp;gt;&lt;/code&gt; tag. Note that it defines namespaces where we would refer to
it as modules, but it’s just for the sake of documentation … and it’s a
namespace after all.&lt;/p&gt;
</description>
				<pubDate>Tue, 25 Mar 2014 16:35:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/03/25/jsdoc-and-the-revealing-module-pattern/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/03/25/jsdoc-and-the-revealing-module-pattern/</guid>
			</item>
		
			<item>
				<title>Converting large XML documents to Ruby Hashes</title>
				<description>&lt;p&gt;A lot of web services out there are dealing with XML documents. To connect a SOAP-based web
service to one of our Rails Applications, we need to translate XML documents to Ruby Hashes.&lt;/p&gt;

&lt;p&gt;First of all - we already had a solution implemented. For that we parsed the XML with
&lt;code&gt;Nokogiri&lt;/code&gt; and used a custom method to iterate over the node-structure
Nokogiri detected. The method we used is a slightly modified version of these discussed
&lt;a href=&quot;http://stackoverflow.com/questions/1230741/convert-a-nokogiri-document-to-a-ruby-hash&quot;&gt;in this stackoverflow article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Encouraged to improve our code quality I dropped our custom XML-Hash-converting method
in favor of a method provided by &lt;code&gt;ActiveSupport&lt;/code&gt; that looks temptingly elegant at the
first glance:&lt;/p&gt;

&lt;p&gt;Once you picked up some xml in a string, say &lt;code&gt;content&lt;/code&gt;, just call &lt;code&gt;Hash.from_xml content&lt;/code&gt;
to get a proper Hash for further processing. And of course you’re free to call it on
&lt;code&gt;HashWithIndifferentAccess&lt;/code&gt; if you need to.&lt;/p&gt;

&lt;p&gt;Unfortunately this strategy is not stable enough to handle large amounts of xml data.
Given plenty of xml stuff saved in &lt;code&gt;large.xml&lt;/code&gt;, we can watch this method fail with
a &lt;code&gt;RuntimeError&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9550517.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;As far I can trace it out, this a known problem with &lt;code&gt;REXML&lt;/code&gt;, that is used behind
the scenes by this method. I tried to came over it by using the famous C-library &lt;code&gt;libxml2&lt;/code&gt;,
that originally was developed for the GNOME project. Happily I noticed that
there’s a wrapping gem for it called &lt;code&gt;libxml-ruby&lt;/code&gt;, to which we at ABSOLVENTA &lt;a href=&quot;https://github.com/xml4r/libxml-ruby/commit/0e96dacd14f6e430750ed58bc26a668bd5415e1f&quot;&gt;already contributed to&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;All I need was a tiny algorithm for applying &lt;code&gt;libxml&lt;/code&gt;’s methods. Having hacked a few
experimental lines into my editor, I noticed that there already &lt;em&gt;is&lt;/em&gt; a Ruby gem for this job.
And it works for me using it in single Ruby script like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/9550623.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;In particular it worked with my evil dark-matter-xml docs!&lt;/p&gt;

&lt;p&gt;A programmer’s world would be so easy without all the &lt;em&gt;if’s&lt;/em&gt; in this world.
Here it means: The solution above works &lt;em&gt;if I use it seperated from any other gems&lt;/em&gt;.
I can’t get it to work in a living Rails environment together with e.g. Nokogiri.
For some reason, Nokogiri ships (at least internally) with its own version of &lt;strong&gt;libxml2&lt;/strong&gt;.
In my case this led to errors when trying to load Nokogiri and libxml-ruby together.
I strongly believe that this can be resolved, but I haven’t found the right way to
puzzle them together yet… (Feel free to drop me a note if you know how it’s possible!)&lt;/p&gt;

&lt;h3 id=&quot;finally&quot;&gt;Finally…&lt;/h3&gt;

&lt;p&gt;The intention for all research above was getting replacing the complex
&lt;code&gt;xml_node_to_hash&lt;/code&gt;-method in favor of a better tested solution maybe
encapsulated in a gem or module.&lt;/p&gt;

&lt;p&gt;No need to mention that it survived all my tackles to get rid of it.
And finally we’re friends.&lt;/p&gt;
</description>
				<pubDate>Tue, 18 Mar 2014 10:00:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/03/18/converting-large-xml-documents-to-ruby-hashes/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/03/18/converting-large-xml-documents-to-ruby-hashes/</guid>
			</item>
		
			<item>
				<title>A Lightweight Firewall/Blacklist as Rack-Middleware</title>
				<description>&lt;p&gt;I recently fell in love with &lt;a href=&quot;http://railscasts.com/episodes/151-rack-middleware&quot;&gt;Rack middleware&lt;/a&gt;.
Rack’s simplicity of serving web requests by nothing but an &lt;code&gt;Array&lt;/code&gt; with three elements
alone is charming. But using it as a bouncer to handle (and possibly already
return) all sorts of stuff before your requests even touch your Rails app
is the &lt;em&gt;real&lt;/em&gt; appeal.&lt;/p&gt;

&lt;p&gt;We had an annoying bot hitting one of our applications today. There was no
harm done but while it was nowhere near a
&lt;a href=&quot;http://en.wikipedia.org/wiki/Denial-of-service_attack&quot; title=&quot;Denial of Service&quot;&gt;DoS&lt;/a&gt;,
its requests did put some load on our servers. All requests came from one
source IP and it would have been easy to block it on the network layer, but as
we host our sites on Heroku, that was not an option.&lt;/p&gt;

&lt;p&gt;Enter a quick middleware hack:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Firewall&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;blacklist&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@blacklist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;192.0.2.1&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;freeze&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# Example IP, see RFC 5735&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blacklist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HTTP_X_FORWARDED_FOR&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Your IP-address has been banned for security reasons.&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;If you feel this is a mistake, please contact &amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s1&quot;&gt;&amp;#39;support@absolventa.de&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;403&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It’s pretty good to test-drive as well: &lt;a href=&quot;https://gist.github.com/carpodaster/8807139#file-firewall_spec-rb&quot;&gt;take a look at the spec&lt;/a&gt;.
There is nice article that
&lt;a href=&quot;http://taylorluk.com/post/54982679495/how-to-test-rack-middleware-with-rspec&quot;&gt;illustrates how to test Rack-apps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have our middleware classes stowed in &lt;code&gt;app/middleware&lt;/code&gt;. You can hook it in with
a simple one-liner in your &lt;code&gt;config/application.rb&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;middleware&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert_after&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Rack&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Runtime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Firewall&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, you need a deployment for every new IP that needs to be blacklisted. But
it’s fast and simple. You’re heartily invited to
&lt;a href=&quot;https://gist.github.com/carpodaster/8807139#file-firewall-rb&quot;&gt;improve the code&lt;/a&gt;
 (send a PR our way).&lt;/p&gt;
</description>
				<pubDate>Tue, 04 Feb 2014 17:03:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/02/04/a-lightweight-firewall-blacklist-as-rack-middleware/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/02/04/a-lightweight-firewall-blacklist-as-rack-middleware/</guid>
			</item>
		
			<item>
				<title>Stubbing an invalid record for inherited_resources</title>
				<description>&lt;p&gt;Saving a record in a controller has at least two outcomes: it can succeed or it
can fail and you want to test this branching.&lt;/p&gt;

&lt;p&gt;In order to decouple a functional test from the concrete attributes or other
states that define its validity, it’s good to skip the actual validation
and stub it out instead.&lt;/p&gt;

&lt;p&gt;Stubbing a failing record for a create or update request is fairly easy for
a vanilla controller:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST create&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;creates a record&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fails to create a record&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, it isn’t that easy with &lt;a href=&quot;https://github.com/josevalim/inherited_resources&quot;&gt;inherited_recources&lt;/a&gt;.
(or more accurately with &lt;a href=&quot;https://github.com/plataformatec/responders&quot;&gt;responders&lt;/a&gt; which is used
behind the scenes). Inherited Resources considers a record invalid when it has &lt;code&gt;errors&lt;/code&gt; (see also
&lt;a href=&quot;https://github.com/josevalim/inherited_resources/issues/38&quot;&gt;this issue&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here is an approach to properly stub record validity for use with Inherited Resources:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# spec/support/advanced_validity_stubbing.rb&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AdvancedValidityStubbing&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;stub_validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:valid?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;validity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validity&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Stubbed to be bad&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;allow_any_instance_of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;and_return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# spec/spec_helper.rb&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;RSpec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;AdvancedValidityStubbing&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The modified controller spec may look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;describe&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;POST create&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;creates a record&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stub_validity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;fails to create a record&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;stub_validity&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:create&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;not_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;change&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				<pubDate>Wed, 15 Jan 2014 17:58:00 +0100</pubDate>
				<link>http://devnull.absolventa.de/2014/01/15/stubbing-an-invalid-record-for-inherited_resources/</link>
				<guid isPermaLink="true">http://devnull.absolventa.de/2014/01/15/stubbing-an-invalid-record-for-inherited_resources/</guid>
			</item>
		
	</channel>
</rss>
